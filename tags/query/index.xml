<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Query on Ask Asya </title>
    <link>http://asya999.github.io/tags/query/</link>
    <language>en-US</language>
    <author>Asya Kamsky</author>
    <rights>Copyright (c) 2016, Asya Kamsky; all rights reserved.</rights>
    <updated>Sun, 09 Oct 2016 00:00:00 UTC</updated>
    
    <item>
      <title>How do I match documents where all array elements match some predicate?</title>
      <link>http://asya999.github.io/post/matchallarrayelements/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/matchallarrayelements/</guid>
      <description>

&lt;h3 id=&#34;question:292757d8f30706addf536c1c5ac8ae1a&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;I need to match all documents where every element of an array matches some predicate.  Can that be done?&lt;/p&gt;

&lt;h3 id=&#34;answer:292757d8f30706addf536c1c5ac8ae1a&#34;&gt;Answer:&lt;/h3&gt;

&lt;p&gt;Yes, the query to do this is actually quite simple to construct.&lt;/p&gt;

&lt;p&gt;Remember that when you match an array, MongoDB will &amp;ldquo;reach inside&amp;rdquo; the array to compare the predicate to every single
array element and return the document if the predicate matches at least one of them.  I like to tell MongoDB newbies
to think of arrays as a field that can hold many different values at the same time.  Once you start thinking of
arrays that way, it becomes a lot easier to understand that query like &amp;ldquo;where A is greater than 50 AND A is less than 10&amp;rdquo;
is not meaningless if &amp;ldquo;A&amp;rdquo; happens to be an array, because different array elements can satisfy the separate parts of
this query.&lt;/p&gt;

&lt;p&gt;What that means is that in order to make sure every array element matches some construct, you should negate that construct and then negate the query again.&lt;/p&gt;

&lt;p&gt;A simple example can probably help:&lt;/p&gt;

&lt;p&gt;Imagine you have this set of documents:
&lt;pre class=&#34;prettyprint&#34;&gt;
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 3, 4, 5, 6 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 5, 6, 7, 8 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4, 5 ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;How do you find all documents where &amp;ldquo;a&amp;rdquo; is less than 5?  That&amp;rsquo;s simple, just &lt;code&gt;db.coll.find({&amp;quot;a&amp;quot;:{&amp;quot;$lt&amp;quot;:5}})&lt;/code&gt; and we get back (unsurprisingly):
&lt;pre class=&#34;prettyprint&#34;&gt;
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 3, 4, 5, 6 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4, 5 ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;This is because at least one element in each of these arrays matches our query predicate.  The third document has no elements that are less than 5.&lt;/p&gt;

&lt;p&gt;Now we want to get back only the documents which have &lt;em&gt;every&lt;/em&gt; element match the same predicate.  Another way of saying &amp;ldquo;I want every document where each element of array is less than 5&amp;rdquo; would be &amp;ldquo;I want every document where none of the elements are greater than or equal to 5&amp;rdquo;.  So we first negate our original query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.coll.find({&amp;quot;a&amp;quot;:{&amp;quot;$gte&amp;quot;:5}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then we negate the entire result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.coll.find({&amp;quot;$nor&amp;quot;:[{&amp;quot;a&amp;quot;:{&amp;quot;$gte&amp;quot;:5}}]})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and as you would expect, the result is:
&lt;pre class=&#34;prettyprint&#34;&gt;
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4 ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;When we deal with numbers, it&amp;rsquo;s easy to &amp;ldquo;negate&amp;rdquo; a condition, but with arrays, reasoning about &amp;ldquo;$not&amp;rdquo; and &amp;ldquo;$nor&amp;rdquo; can be tricky so let&amp;rsquo;s try again with strings where we can&amp;rsquo;t use &amp;ldquo;$gt&amp;rdquo; and &amp;ldquo;$lt&amp;rdquo; so easily.
&lt;pre class=&#34;prettyprint&#34;&gt;
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;, &amp;ldquo;5&amp;rdquo;, &amp;ldquo;6&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;5&amp;rdquo;, &amp;ldquo;6&amp;rdquo;, &amp;ldquo;7&amp;rdquo;, &amp;ldquo;8&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;, &amp;ldquo;5&amp;rdquo; ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try the same thing we tried above where first we will look for a being one of the set &amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;4&amp;rdquo; and go from there.
&lt;pre class=&#34;prettyprint&#34;&gt;
db.coll.find({&amp;ldquo;a&amp;rdquo;:{&amp;ldquo;$in&amp;rdquo;:[&amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;4&amp;rdquo;]}})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;, &amp;ldquo;5&amp;rdquo;, &amp;ldquo;6&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;, &amp;ldquo;5&amp;rdquo; ] }
db.coll.find({&amp;ldquo;a&amp;rdquo;:{&amp;ldquo;$nin&amp;rdquo;:[&amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;4&amp;rdquo;]}})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;5&amp;rdquo;, &amp;ldquo;6&amp;rdquo;, &amp;ldquo;7&amp;rdquo;, &amp;ldquo;8&amp;rdquo; ] }
&lt;/pre&gt;
What happened?  Did you expect to get back every document which had an element that isn&amp;rsquo;t one of the four in the &amp;ldquo;$nin&amp;rdquo; list?  Recall that [&amp;ldquo;$nin&amp;rdquo;][2] is the same as saying [&amp;ldquo;$not&amp;rdquo;][3] &amp;ldquo;$in&amp;rdquo; which is the same as saying &amp;ldquo;take the set of documents which satisfy the query &lt;code&gt;{&amp;quot;$in&amp;quot;:[&amp;lt;list&amp;gt;]}&lt;/code&gt; and give me the rest of the documents.   So how do we express the query that we want all documents which have an &lt;em&gt;element&lt;/em&gt; that isn&amp;rsquo;t one of our list?&lt;/p&gt;

&lt;p&gt;Whenever the question (or query) involves an element of an array, there&amp;rsquo;s a good chance that you should be using [&amp;ldquo;$elemMatch&amp;rdquo;][1] to express it.   Commonly, we use &amp;ldquo;$elemMatch&amp;rdquo; to express that we want the same array element to match multiple conditions in the query predicates, but it&amp;rsquo;s also correct to use it when you are trying to negate the meaning of a query by applying the negation to the element of an array, rather than to the document selection as a whole.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
// find me all documents where at least one array element is *not* on our list
db.coll.find({&#34;a&#34;:{&#34;$elemMatch&#34;:{&#34;$nin&#34;:[&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;]}}})
{ &#34;a&#34; : [ &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;, &#34;5&#34; ] }
{ &#34;a&#34; : [ &#34;3&#34;, &#34;4&#34;, &#34;5&#34;, &#34;6&#34; ] }
{ &#34;a&#34; : [ &#34;5&#34;, &#34;6&#34;, &#34;7&#34;, &#34;8&#34; ] }
// now we negate the entire query
db.coll.find({&#34;$nor&#34;:[{&#34;a&#34;:{&#34;$elemMatch&#34;:{&#34;$nin&#34;:[&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;]}}}]})
{ &#34;a&#34; : [ &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34; ] }
&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s another tricky example involving a regular expression - while you can negate a regular expression, you may inadvertantly limit matching to string types only, and when you have mixed type arrays (not recommended, but it happens) that&amp;rsquo;s won&amp;rsquo;t give you desired results.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;notstr&#34; ] }
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;str4&#34; ] }
{ &#34;a&#34; : [ 1, 2, 3, 4, 5 ] }
{ &#34;a&#34; : [ 5, 6, 7, 8, 9 ] }
{ &#34;a&#34; : [ &#34;str1&#34;, 0, 10 ] }
&lt;/pre&gt;

&lt;p&gt;Say I want to get back just documents that have &lt;em&gt;all&lt;/em&gt; its &amp;ldquo;a&amp;rdquo; elements start with characters &amp;ldquo;str&amp;rdquo;. Let&amp;rsquo;s look at some queries and their results:
&lt;pre class=&#34;prettyprint&#34;&gt;
db.coll.find({&amp;ldquo;a&amp;rdquo;:/^str/})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, &amp;ldquo;str2&amp;rdquo;, &amp;ldquo;str3&amp;rdquo;, &amp;ldquo;notstr&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, &amp;ldquo;str2&amp;rdquo;, &amp;ldquo;str3&amp;rdquo;, &amp;ldquo;str4&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, 0, 10 ] }
db.coll.find({&amp;ldquo;a&amp;rdquo;:{$not:/^str/}})
{ &amp;ldquo;a&amp;rdquo; : [ 1, 2, 3, 4, 5 ] }
{ &amp;ldquo;a&amp;rdquo; : [ 5, 6, 7, 8, 9 ] }
// negate regular expression:
db.coll.find({&amp;ldquo;a&amp;rdquo;:/^(?!str)/})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, &amp;ldquo;str2&amp;rdquo;, &amp;ldquo;str3&amp;rdquo;, &amp;ldquo;notstr&amp;rdquo; ] }
db.coll.find({&amp;ldquo;a&amp;rdquo;:{$not:/^(?!str)/}})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, &amp;ldquo;str2&amp;rdquo;, &amp;ldquo;str3&amp;rdquo;, &amp;ldquo;str4&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ 1, 2, 3, 4, 5 ] }
{ &amp;ldquo;a&amp;rdquo; : [ 5, 6, 7, 8, 9 ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, 0, 10 ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Any surprises here?   First, we see that negated regular expression query only matches elements of type string.  We also see that &amp;ldquo;$not&amp;rdquo; added to any regex query returns the complement of documents that were returned without &amp;ldquo;$not&amp;rdquo; present.  That&amp;rsquo;s not what we need when trying to get all documents with every element that satisfies the predicate.   Let&amp;rsquo;s see if &amp;ldquo;$elemMatch&amp;rdquo; gives us what we want:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
// note that $elemMatch requires a subdocument so we use [&#34;$regex&#34;][4] rather than / / syntax
db.coll.find({&#34;a&#34;:{&#34;$elemMatch&#34;:{&#34;$regex&#34;:&#34;^str&#34;}}})
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;notstr&#34; ] }
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;str4&#34; ] }
{ &#34;a&#34; : [ &#34;str1&#34;, 0, 10 ] }
db.coll.find({&#34;a&#34;:{&#34;$elemMatch&#34;:{$not:/^str/}}})
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;notstr&#34; ] }
{ &#34;a&#34; : [ 1, 2, 3, 4, 5 ] }
{ &#34;a&#34; : [ 5, 6, 7, 8, 9 ] }
{ &#34;a&#34; : [ &#34;str1&#34;, 0, 10 ] }
// bingo!  we got back every document that had something that would NOT match &#34;^str&#34;
// now we just negate that whole query
db.coll.find({&#34;$nor&#34;:[{&#34;a&#34;:{&#34;$elemMatch&#34;:{$not:/^str/}}}]})
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;str4&#34; ] }
&lt;/pre&gt;

&lt;p&gt;Now, let&amp;rsquo;s try it on a more complex document structure with a more complex predicate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-09T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 2, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-19T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 3, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2015-12-12T00:00:00Z&amp;quot;) } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-02-05T12:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 9, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-03-01T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 5, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2015-11-01T00:00:00Z&amp;quot;) } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 3, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-01-31T12:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 6, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-03-01T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-10-01T00:00:00Z&amp;quot;) } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-09T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 2, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-19T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 3, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-09-21T00:00:00Z&amp;quot;) } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-09T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 2, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-19T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 3, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-01-01T00:00:00Z&amp;quot;) }, { &amp;quot;x&amp;quot; : 4, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-01-01T00:00:00Z&amp;quot;) } ] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If our predicate was just about &amp;ldquo;b.x&amp;rdquo; or just about &amp;ldquo;b.y&amp;rdquo; we would use &amp;ldquo;$elemMatch&amp;rdquo; rather than dotted notation to run a query just like our first example.  To find all documents where &amp;ldquo;b.x&amp;rdquo; is either 1, 2 or 3, we can go through these steps (assume all queries ask in projection just for the field I&amp;rsquo;m querying by):
````
// find all documents where &amp;ldquo;b.x&amp;rdquo; is one of 1,2,3
db.coll.find({&amp;ldquo;b.x&amp;rdquo;:{$in:[1,2,3]}})
{ &amp;ldquo;b&amp;rdquo; : [ { &amp;ldquo;x&amp;rdquo; : 1 }, { &amp;ldquo;x&amp;rdquo; : 2 }, { &amp;ldquo;x&amp;rdquo; : 3 } ] }
{ &amp;ldquo;b&amp;rdquo; : [ { &amp;ldquo;x&amp;rdquo; : 1 }, { &amp;ldquo;x&amp;rdquo; : 9 }, { &amp;ldquo;x&amp;rdquo; : 5 } ] }
{ &amp;ldquo;b&amp;rdquo; : [ { &amp;ldquo;x&amp;rdquo; : 3 }, { &amp;ldquo;x&amp;rdquo; : 6 }, { &amp;ldquo;x&amp;rdquo; : 1 } ] }
{ &amp;ldquo;b&amp;rdquo; : [ { &amp;ldquo;x&amp;rdquo; : 1 }, { &amp;ldquo;x&amp;rdquo; : 2 }, { &amp;ldquo;x&amp;rdquo; : 3 } ] }
{ &amp;ldquo;b&amp;rdquo; : [ { &amp;ldquo;x&amp;rdquo; : 1 }, { &amp;ldquo;x&amp;rdquo; : 2 }, { &amp;ldquo;x&amp;rdquo; : 3 }, { &amp;ldquo;x&amp;rdquo; : 4 } ] }
// another way of structuring this query is with $or
db.coll.find({$or:[{&amp;ldquo;b.x&amp;rdquo;:1},{&amp;ldquo;b.x&amp;rdquo;:2},{&amp;ldquo;b.x&amp;rdquo;:3}]})
db.coll.find({$and:[{&amp;ldquo;b.x&amp;rdquo;:1},{&amp;ldquo;b.x&amp;rdquo;:2},{&amp;ldquo;b.x&amp;rdquo;:3}]})&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
