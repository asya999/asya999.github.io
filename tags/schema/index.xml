<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Schema on Ask Asya </title>
    <link>http://asya999.github.io/tags/schema/</link>
    <language>en-US</language>
    <author>Asya Kamsky</author>
    <rights>Copyright (c) 2016, Asya Kamsky; all rights reserved.</rights>
    <updated>Sun, 09 Oct 2016 00:00:00 UTC</updated>
    
    <item>
      <title>How to match documents where all array elements match predicate.</title>
      <link>http://asya999.github.io/post/matchallarrayelements/</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/matchallarrayelements/</guid>
      <description>

&lt;h3 id=&#34;question&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;I need to match all documents where every element of an array matches some predicate.  Can that be done?&lt;/p&gt;

&lt;h3 id=&#34;answer&#34;&gt;Answer:&lt;/h3&gt;

&lt;p&gt;Yes, the query to do this is actually quite simple to construct.&lt;/p&gt;

&lt;p&gt;Remember that when you match an array, MongoDB will &amp;ldquo;reach inside&amp;rdquo; the array to compare the predicate to every single
array element and return the document if the predicate matches at least one of them.  I like to tell MongoDB newbies
to think of arrays as a field that can hold many different values at the same time.  Once you start thinking of
arrays that way, it becomes a lot easier to understand that query like &amp;ldquo;where A is greater than 50 AND A is less than 10&amp;rdquo;
is not meaningless if &amp;ldquo;A&amp;rdquo; happens to be an array, because different array elements can satisfy the separate parts of
this query.&lt;/p&gt;

&lt;p&gt;What that means is that in order to make sure every array element matches some construct, you should negate that construct and then negate the query again.&lt;/p&gt;

&lt;p&gt;A simple example can probably help:&lt;/p&gt;

&lt;p&gt;Imagine you have this set of documents:
&lt;pre class=&#34;prettyprint&#34;&gt;
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 3, 4, 5, 6 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 5, 6, 7, 8 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4, 5 ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;How do you find all documents where &amp;ldquo;a&amp;rdquo; is less than 5?  That&amp;rsquo;s simple, just &lt;code&gt;db.coll.find({&amp;quot;a&amp;quot;:{&amp;quot;$lt&amp;quot;:5}})&lt;/code&gt; and we get back (unsurprisingly):
&lt;pre class=&#34;prettyprint&#34;&gt;
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 3, 4, 5, 6 ] }
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4, 5 ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;This is because at least one element in each of these arrays matches our query predicate.  The third document has no elements that are less than 5.&lt;/p&gt;

&lt;p&gt;Now we want to get back only the documents which have &lt;em&gt;every&lt;/em&gt; element match the same predicate.  Another way of saying &amp;ldquo;I want every document where each element of array is less than 5&amp;rdquo; would be &amp;ldquo;I want every document where none of the elements are greater than or equal to 5&amp;rdquo;.  So we first negate our original query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.coll.find({&amp;quot;a&amp;quot;:{&amp;quot;$gte&amp;quot;:5}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then we negate the entire result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.coll.find({&amp;quot;$nor&amp;quot;:[{&amp;quot;a&amp;quot;:{&amp;quot;$gte&amp;quot;:5}}]})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and as you would expect, the result is:
&lt;pre class=&#34;prettyprint&#34;&gt;
{ &amp;ldquo;a&amp;rdquo;: [ 1, 2, 3, 4 ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;When we deal with numbers, it&amp;rsquo;s easy to &amp;ldquo;negate&amp;rdquo; a condition, but with arrays, reasoning about &amp;ldquo;$not&amp;rdquo; and &amp;ldquo;$nor&amp;rdquo; can be tricky so let&amp;rsquo;s try again with strings where we can&amp;rsquo;t use &amp;ldquo;$gt&amp;rdquo; and &amp;ldquo;$lt&amp;rdquo; so easily.
&lt;pre class=&#34;prettyprint&#34;&gt;
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;, &amp;ldquo;5&amp;rdquo;, &amp;ldquo;6&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;5&amp;rdquo;, &amp;ldquo;6&amp;rdquo;, &amp;ldquo;7&amp;rdquo;, &amp;ldquo;8&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;, &amp;ldquo;5&amp;rdquo; ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try the same thing we tried above where first we will look for a being one of the set &amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;4&amp;rdquo; and go from there.
&lt;pre class=&#34;prettyprint&#34;&gt;
db.coll.find({&amp;ldquo;a&amp;rdquo;:{&amp;ldquo;$in&amp;rdquo;:[&amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;4&amp;rdquo;]}})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;, &amp;ldquo;5&amp;rdquo;, &amp;ldquo;6&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;1&amp;rdquo;, &amp;ldquo;2&amp;rdquo;, &amp;ldquo;3&amp;rdquo;, &amp;ldquo;4&amp;rdquo;, &amp;ldquo;5&amp;rdquo; ] }
db.coll.find({&amp;ldquo;a&amp;rdquo;:{&amp;ldquo;$nin&amp;rdquo;:[&amp;ldquo;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;,&amp;ldquo;4&amp;rdquo;]}})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;5&amp;rdquo;, &amp;ldquo;6&amp;rdquo;, &amp;ldquo;7&amp;rdquo;, &amp;ldquo;8&amp;rdquo; ] }
&lt;/pre&gt;
What happened?  Did you expect to get back every document which had an element that isn&amp;rsquo;t one of the four in the &amp;ldquo;$nin&amp;rdquo; list?  Recall that [&amp;ldquo;$nin&amp;rdquo;][2] is the same as saying [&amp;ldquo;$not&amp;rdquo;][3] &amp;ldquo;$in&amp;rdquo; which is the same as saying &amp;ldquo;take the set of documents which satisfy the query &lt;code&gt;{&amp;quot;$in&amp;quot;:[&amp;lt;list&amp;gt;]}&lt;/code&gt; and give me the rest of the documents.   So how do we express the query that we want all documents which have an &lt;em&gt;element&lt;/em&gt; that isn&amp;rsquo;t one of our list?&lt;/p&gt;

&lt;p&gt;Whenever the question (or query) involves an element of an array, there&amp;rsquo;s a good chance that you should be using [&amp;ldquo;$elemMatch&amp;rdquo;][1] to express it.   Commonly, we use &amp;ldquo;$elemMatch&amp;rdquo; to express that we want the same array element to match multiple conditions in the query predicates, but it&amp;rsquo;s also correct to use it when you are trying to negate the meaning of a query by applying the negation to the element of an array, rather than to the document selection as a whole.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
// find me all documents where at least one array element is *not* on our list
db.coll.find({&#34;a&#34;:{&#34;$elemMatch&#34;:{&#34;$nin&#34;:[&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;]}}})
{ &#34;a&#34; : [ &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;, &#34;5&#34; ] }
{ &#34;a&#34; : [ &#34;3&#34;, &#34;4&#34;, &#34;5&#34;, &#34;6&#34; ] }
{ &#34;a&#34; : [ &#34;5&#34;, &#34;6&#34;, &#34;7&#34;, &#34;8&#34; ] }
// now we negate the entire query
db.coll.find({&#34;$nor&#34;:[{&#34;a&#34;:{&#34;$elemMatch&#34;:{&#34;$nin&#34;:[&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;]}}}]})
{ &#34;a&#34; : [ &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34; ] }
&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s another tricky example involving a regular expression - while you can negate a regular expression, you may inadvertantly limit matching to string types only, and when you have mixed type arrays (not recommended, but it happens) that&amp;rsquo;s won&amp;rsquo;t give you desired results.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;notstr&#34; ] }
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;str4&#34; ] }
{ &#34;a&#34; : [ 1, 2, 3, 4, 5 ] }
{ &#34;a&#34; : [ 5, 6, 7, 8, 9 ] }
{ &#34;a&#34; : [ &#34;str1&#34;, 0, 10 ] }
&lt;/pre&gt;

&lt;p&gt;Say I want to get back just documents that have &lt;em&gt;all&lt;/em&gt; its &amp;ldquo;a&amp;rdquo; elements start with characters &amp;ldquo;str&amp;rdquo;. Let&amp;rsquo;s look at some queries and their results:
&lt;pre class=&#34;prettyprint&#34;&gt;
db.coll.find({&amp;ldquo;a&amp;rdquo;:/^str/})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, &amp;ldquo;str2&amp;rdquo;, &amp;ldquo;str3&amp;rdquo;, &amp;ldquo;notstr&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, &amp;ldquo;str2&amp;rdquo;, &amp;ldquo;str3&amp;rdquo;, &amp;ldquo;str4&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, 0, 10 ] }
db.coll.find({&amp;ldquo;a&amp;rdquo;:{$not:/^str/}})
{ &amp;ldquo;a&amp;rdquo; : [ 1, 2, 3, 4, 5 ] }
{ &amp;ldquo;a&amp;rdquo; : [ 5, 6, 7, 8, 9 ] }
// negate regular expression:
db.coll.find({&amp;ldquo;a&amp;rdquo;:/^(?!str)/})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, &amp;ldquo;str2&amp;rdquo;, &amp;ldquo;str3&amp;rdquo;, &amp;ldquo;notstr&amp;rdquo; ] }
db.coll.find({&amp;ldquo;a&amp;rdquo;:{$not:/^(?!str)/}})
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, &amp;ldquo;str2&amp;rdquo;, &amp;ldquo;str3&amp;rdquo;, &amp;ldquo;str4&amp;rdquo; ] }
{ &amp;ldquo;a&amp;rdquo; : [ 1, 2, 3, 4, 5 ] }
{ &amp;ldquo;a&amp;rdquo; : [ 5, 6, 7, 8, 9 ] }
{ &amp;ldquo;a&amp;rdquo; : [ &amp;ldquo;str1&amp;rdquo;, 0, 10 ] }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Any surprises here?   First, we see that negated regular expression query only matches elements of type string.  We also see that &amp;ldquo;$not&amp;rdquo; added to any regex query returns the complement of documents that were returned without &amp;ldquo;$not&amp;rdquo; present.  That&amp;rsquo;s not what we need when trying to get all documents with every element that satisfies the predicate.   Let&amp;rsquo;s see if &amp;ldquo;$elemMatch&amp;rdquo; gives us what we want:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;
// note that $elemMatch requires a subdocument so we use [&#34;$regex&#34;][4] rather than / / syntax
db.coll.find({&#34;a&#34;:{&#34;$elemMatch&#34;:{&#34;$regex&#34;:&#34;^str&#34;}}})
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;notstr&#34; ] }
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;str4&#34; ] }
{ &#34;a&#34; : [ &#34;str1&#34;, 0, 10 ] }
db.coll.find({&#34;a&#34;:{&#34;$elemMatch&#34;:{$not:/^str/}}})
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;notstr&#34; ] }
{ &#34;a&#34; : [ 1, 2, 3, 4, 5 ] }
{ &#34;a&#34; : [ 5, 6, 7, 8, 9 ] }
{ &#34;a&#34; : [ &#34;str1&#34;, 0, 10 ] }
// bingo!  we got back every document that had something that would NOT match &#34;^str&#34;
// now we just negate that whole query
db.coll.find({&#34;$nor&#34;:[{&#34;a&#34;:{&#34;$elemMatch&#34;:{$not:/^str/}}}]})
{ &#34;a&#34; : [ &#34;str1&#34;, &#34;str2&#34;, &#34;str3&#34;, &#34;str4&#34; ] }
&lt;/pre&gt;

&lt;p&gt;Now, let&amp;rsquo;s try it on a more complex document structure with a more complex predicate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-09T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 2, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-19T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 3, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2015-12-12T00:00:00Z&amp;quot;) } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-02-05T12:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 9, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-03-01T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 5, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2015-11-01T00:00:00Z&amp;quot;) } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 3, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-01-31T12:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 6, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-03-01T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-10-01T00:00:00Z&amp;quot;) } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-09T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 2, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-19T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 3, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-09-21T00:00:00Z&amp;quot;) } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-09T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 2, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-04-19T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 3, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-01-01T00:00:00Z&amp;quot;) }, 
          { &amp;quot;x&amp;quot; : 4, &amp;quot;y&amp;quot; : ISODate(&amp;quot;2016-01-01T00:00:00Z&amp;quot;) } ] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If our predicate was just about &amp;ldquo;b.x&amp;rdquo; or just about &amp;ldquo;b.y&amp;rdquo; we would use &amp;ldquo;$elemMatch&amp;rdquo; rather than dotted notation to run a query just like our first example.  To find all documents where &amp;ldquo;b.x&amp;rdquo; is either 1, 2 or 3, we can go through these steps (assume all queries ask in projection just for the field I&amp;rsquo;m querying by):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// find all documents where &amp;quot;b.x&amp;quot; is one of 1,2,3
db.coll.find({$nor:[{&amp;quot;b&amp;quot;:{$elemMatch:{&amp;quot;x&amp;quot;:{$nin:[1,2,3]}}}}]},{_id:0,&amp;quot;b.x&amp;quot;:1})
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1 }, { &amp;quot;x&amp;quot; : 2 }, { &amp;quot;x&amp;quot; : 3 } ] }
{ &amp;quot;b&amp;quot; : [ { &amp;quot;x&amp;quot; : 1 }, { &amp;quot;x&amp;quot; : 2 }, { &amp;quot;x&amp;quot; : 3 } ] }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Further Thoughts on How to Track Versions with MongoDB</title>
      <link>http://asya999.github.io/post/revisitversions/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/revisitversions/</guid>
      <description>&lt;h3 id=&#34;guest-post-by-paul-done-http-pauldone-blogspot-co-uk&#34;&gt;GUEST POST by &lt;a href=&#34;http://pauldone.blogspot.co.uk/&#34;&gt;Paul Done&lt;/a&gt; &lt;/h3&gt;

&lt;p&gt;In a &lt;a href=&#34;http://askasya.com/post/trackversions&#34;&gt;previous Ask Asya blog post&lt;/a&gt;,
Asya outlined various approaches for preserving historical versions of records for auditing purposes, whilst allowing current versions of records to be easily inserted and queried. Having found the post to be extremely useful for one of my projects, and following some further investigations of my own, I realised that two of the choices could be refined a little to be more optimal. Upon feeding back my findings, Asya graciously asked me to document them here, so here goes.&lt;/p&gt;

&lt;h4 id=&#34;revisit-of-choice-2-embed-versions-in-a-single-document&#34;&gt;Revisit of Choice 2  (Embed Versions in a Single Document)&lt;/h4&gt;

&lt;p&gt;The presented ‘compare-and-swap&amp;rsquo; example code, to generate a new version and update version history, is very effective at ensuring consistency of versions in a thread-safe manner. However, I felt that there was scope
to reduce the update latency which will be particularly high when a document has grown, with many previous versions embedded.&lt;/p&gt;

&lt;p&gt;eor example, if a current document has tens of embedded previous versions, then projecting the whole document back to the client application, updating part of the document copy and then sending the whole document as an update to the database, will be slower than necessary. I prototyped a refactored version of the example code (shown below) which exhibits the same functional behaviour, but avoids projecting the entire document and uses an in-place update to push changes to the database.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t return all the old versions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var doc = db.coll.findOne({&amp;quot;_id&amp;quot;: 174}, {&amp;quot;prev&amp;quot;: 0});  
    var currVersion = doc.current.v;
    var previous = doc.current;
    var current = {
          &amp;quot;v&amp;quot; : currVersion+1,
          &amp;quot;attr1&amp;quot;: doc.current.attr1,
          &amp;quot;attr2&amp;quot;: &amp;quot;YYYY&amp;quot;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perform in-place update of changes only: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var result = db.coll.update(
         { &amp;quot;_id&amp;quot; : 174, &amp;quot;current.v&amp;quot;: currVersion},
         { &amp;quot;$set&amp;quot; :  {&amp;quot;current&amp;quot;: current},
           &amp;quot;$push&amp;quot; :  {&amp;quot;prev&amp;quot;: previous}
         }
    );

    if (result.nModified != 1)  {
         print(&amp;quot;Someone got there first, replay flow to try again&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result, even when the number of versions held in a document
increases over time, the update latency for adding a new version remains roughly constant.&lt;/p&gt;

&lt;h4 id=&#34;revisit-of-choice-3-separate-collection-for-previous-versions&#34;&gt;Revisit of Choice 3  (Separate Collection for Previous Versions)&lt;/h4&gt;

&lt;p&gt;The original post implies that this choice is technically challenging to implement, to ingest a new document version whilst maintaining consistency with previous versions, in the face of system failure.  However, I don&amp;rsquo;t feel it&amp;rsquo;s that bad, if the update flow is crafted carefully. If the order of writes is implemented as &amp;ldquo;write to previous collection before writing to current collection&amp;rdquo;, then in a failure scenario, there is potential for a duplicate record version but not a lost record version. Also, there are ways for subsequent querying code to gracefully deal with the duplicate.&lt;/p&gt;

&lt;p&gt;If the following three principles are acceptable to an application development team, then this is a viable versioning option and doesn&amp;rsquo;t have the implementation complexity of choice 5, for example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;System failure could result in a duplicate version, but not a lost version.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Any application code that wants to query all or some versions of the same entity, is happy to issue two queries simultaneously, one against the current collection (to get the current version) and one against the previous collection (to get historic versions), and then merge the results. In cases where a duplicate has been introduced (but not yet cleaned up - see next point), the application code just has to detect that the latest version in the current collection also appears as a record in the previous collection. When this occurs, the application code just ignores the duplicate, when constructing its results. In my experience, most &amp;lsquo;normal&amp;rsquo; queries issued by an application, will just query the current collection and be interested in latest versions of entities only. Therefore this &amp;lsquo;double-query&amp;rsquo; mechanism is only needed for the parts of an application where historic version analysis is required.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The next time a new version of a document is pushed into the system, the old duplicate in the previous collection (if the duplicate exists) will become a genuine previous version. The current collection will contain the new version and the previous collection will only contain previous versions. As a result, there is no need for any background clean up code mechanisms to be put in place.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For clarity, I&amp;rsquo;ve included a JavaScript example of the full update flow below, which can be run from the Mongo shell.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //
    // CREATE SAMPLE DATA
    //

    db.curr_coll.drop();
    db.prev_coll.drop();
    db.curr_coll.ensureIndex({&amp;quot;docId&amp;quot; : 1}, {&amp;quot;unique&amp;quot;: true});
    db.prev_coll.ensureIndex({&amp;quot;docId&amp;quot; : 1,  &amp;quot;v&amp;quot; :1}, {&amp;quot;unique&amp;quot;: true});
    db.curr_coll.insert([
         {&amp;quot;docId&amp;quot;: 174, &amp;quot;v&amp;quot;: 3, &amp;quot;attr1&amp;quot;: 184, &amp;quot;attr2&amp;quot;: &amp;quot;A-1&amp;quot;},
         {&amp;quot;docId&amp;quot;: 133, &amp;quot;v&amp;quot;: 3, &amp;quot;attr1&amp;quot;: 284, &amp;quot;attr2&amp;quot;: &amp;quot;B-1&amp;quot;}
    ]);

    db.prev_coll.insert([
         {&amp;quot;docId&amp;quot;: 174, &amp;quot;v&amp;quot;: 1, &amp;quot;attr1&amp;quot;: 165},
         {&amp;quot;docId&amp;quot;: 174, &amp;quot;v&amp;quot;: 2, &amp;quot;attr1&amp;quot;: 165, &amp;quot;attr2&amp;quot; : &amp;quot;A-1&amp;quot;},
         {&amp;quot;docId&amp;quot;: 133, &amp;quot;v&amp;quot;: 1, &amp;quot;attr1&amp;quot;: 265},
         {&amp;quot;docId&amp;quot;: 133, &amp;quot;v&amp;quot;: 2, &amp;quot;attr1&amp;quot;: 184, &amp;quot;attr2&amp;quot; : &amp;quot;B-1&amp;quot;}
    ]);

    //
    // EXAMPLE TEST RUN FLOW 
    //
    // UPSERT (NOT INSERT) IN CASE FAILURE OCCURED DURING PRIOR ATTEMPT.
    // THE PREV COLLECTION MAY ALREADY CONTAIN THE &#39;OLD&#39; CURRENT VERSION.
    // IF ALREADY PRESENT, THIS UPSERT WILL BE A &#39;NO-OP&#39;, RETURNING:
    //  nMatched: 1, nUpserted: 0, nModified: 0.

    var previous = db.curr_coll.findOne({&amp;quot;docId&amp;quot;: 174}, {_id: 0});
    var currVersion = previous.v;
    var result = db.prev_coll.update(
         {&amp;quot;docId&amp;quot; : previous.docId, &amp;quot;v&amp;quot;: previous.v },
         { &amp;quot;$set&amp;quot;: previous }
       , {&amp;quot;upsert&amp;quot;: true});

    // &amp;lt;-- STOP EXECUTION HERE ON A RUN TO SIMULATE FAILURE, THEN RUN
    //     FULL FLOW TO SHOW HOW THINGS WILL BE NATURALLY CLEANED-UP
    // UPDATE NEW VERSION IN CURR COLLECTION, USING THREAD-SAFE VERSION CHECK

    var current = {&amp;quot;v&amp;quot;: currVersion+1, &amp;quot;attr1&amp;quot;: previous.attr1, &amp;quot;attr2&amp;quot;:&amp;quot;YYYY&amp;quot;};
    var result = db.curr_coll.update({&amp;quot;docId&amp;quot;: 174, &amp;quot;v&amp;quot;: currVersion},
         {&amp;quot;$set&amp;quot;: current}
    );

    if (result.nModified != 1) {
         print(&amp;quot;Someone got there first, replay flow to try again&amp;quot;);
    }

    //
    // EXAMPLE VERSION HISTORY QUERY CODE
    //

    // BUILD LIST OF ALL VERSIONS OF ENTITY, STARTING WITH CURRENT VERSION

    var fullVersionHistory = [];
    var latest = db.curr_coll.findOne({&amp;quot;docId&amp;quot;: 174}, {_id: 0});
    var latestVersion = latest.v;
    fullVersionHistory.push(latest);

    // QUERY ALL PREVIOUS VERSIONS (EXCLUDES DUPLICATE CURRENT VERSION IF EXISTS)
    var previousVersionsCursor = db.prev_coll.find({
         &amp;quot;$and&amp;quot;: [
              {&amp;quot;docId&amp;quot;: 174},
              {&amp;quot;v&amp;quot;: {&amp;quot;$ne&amp;quot;: latestVersion}}
         ]
    }, {_id: 0}).sort({v: -1});

    // ADD ALL THESE PREVIOUS VERSIONS TO THE LIST
    previousVersionsCursor.forEach(function(doc) {
          fullVersionHistory.push(doc);
    });

    // DISPLAY ALL VERSIONS OF AN ENTITY (NO DUPLICATES ARE PRESENT)
    printjson(fullVersionHistory);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result of this approach, it is easy to query current versions of entities, easy to query the full version history of a given entity and easy to update an entity with a new version.&lt;/p&gt;

&lt;h3 id=&#34;in-summary&#34;&gt;In Summary&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve taken the liberty of providing a modified version of Asya&amp;rsquo;s summary table below, to expand out the criteria that may be relevant when choosing a versioning strategy for a given use case. My version of the table also reflects the improved results for choices 2 and 3, on the back of what has been discussed in this blog post.&lt;/p&gt;

&lt;p&gt;Updated Table of Tradeoffs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.askasya.com/assets/table.png&#34; alt=&#34;Updated Table of Tradeoffs&#34; /&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Social Status Feed in MongoDB</title>
      <link>http://asya999.github.io/post/socialstatusfeed/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/socialstatusfeed/</guid>
      <description>

&lt;h3 id=&#34;socialite&#34;&gt;Socialite&lt;/h3&gt;

&lt;p&gt;At MongoDBWorld, my colleague Darren Wood and I gave &lt;a href=&#34;http://www.mongodb.com/search/google/socialite?query=socialite&amp;amp;cx=017213726194841070573%3Ak6mpwzohlje&amp;amp;cof=FORID%3A9&amp;amp;sitesearch=&#34;&gt;three back-to-back presentations&lt;/a&gt; about an &lt;a href=&#34;http://github.com/10gen-labs/socialite&#34;&gt;open source project called Socialite&lt;/a&gt; which is a reference architecture implementation of a social status feed service.  Darren was the one who wrote the bulk of the source code and I installed and ran extensive performance tests in different configurations to determine how the different schema and indexing options scale and to get an understanding of the resources required for various sizes and distributions of workloads.&lt;/p&gt;

&lt;p&gt;The recordings and slides are &lt;a href=&#34;http://www.mongodb.com/search/google/socialite?query=socialite&amp;amp;cx=017213726194841070573%3Ak6mpwzohlje&amp;amp;cof=FORID%3A9&amp;amp;sitesearch=&#34;&gt;now available on MongoDB website&lt;/a&gt;, if you want to jump in and watch, but since we had to race through the material,  I&amp;rsquo;m going to blog about some of the more interesting questions it raised, mainly about schema design, indexing and sharding choices and how to benchmark a large, complex application.&lt;/p&gt;

&lt;p&gt;There were three talks because there was a large amount of material and because there are several rather complex orthogonal topics when considering a social status feed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How will you store the content long term&lt;/li&gt;
&lt;li&gt;How will you store the user graph&lt;/li&gt;
&lt;li&gt;How will you serve up the status feed for a particular user when they log in&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last one is probably most interesting in that it has the most possible approaches, though as it turns out, some have very big downsides and would only be appropriate to pretty small systems.  User graph is fascinating because of its relevance to so many different domains beyond social networks of friends.  And performance considerations are complex and interdependent among all of them.   For each of the three talks we had two parts - Darren discussed possible schema designs, indexing considerations and if appropriate sharding implications, and I walked through the actual testing I did and whether each option held up as expected.&lt;/p&gt;

&lt;p&gt;Unfortunately even across three sessions we were quite time limited, so all the various bits of material we have that didn&amp;rsquo;t make it into these presentations will end up in one of several spots:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;here&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mongodb.org&#34;&gt;mongodb.org blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;advanced schema design class at &lt;a href=&#34;https://univerity.mongodb.com&#34;&gt;MongoDB University&lt;/a&gt; (coming soon!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I get a lot of questions about schema design, and social data is both popular and very doable in MongoDB but the naive approach is usually bound to meet with failure, so the schema needs to be carefully considered with an eye towards the following two most important considerations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enduser latency&lt;/li&gt;
&lt;li&gt;linear scaling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we said during the presentations, for every single decision, we had to consider as the most important goals keeping the user&amp;rsquo;s first read latency as low and constant as possible (or else they would leave and go somewhere else) and our ability to scale any design we had linearly with scaling.  That meant that every single workload had to be scalable or partitionable in a way that would isolate the workload to a subset of data.&lt;/p&gt;

&lt;p&gt;Over the next few months as I write up different parts of the system, and consider the schema, indexes and possible shard data distribution, you will see me return to these two litmus tests again and again.   In order to have highest chance of success at large scale any option that hinders one of these goals should be out of the running.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best Versions with MongoDB</title>
      <link>http://asya999.github.io/post/bestversion/</link>
      <pubDate>Fri, 30 May 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/bestversion/</guid>
      <description>

&lt;h3 id=&#34;question&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;Recall &lt;a href=&#34;http://askasya.com/post/trackversions&#34;&gt;our previous discussion&lt;/a&gt; about ways to  recreate older version of a document that ever existed in a particular collection.&lt;/p&gt;

&lt;p&gt;The goal was to preserve every state for each object, but to respond to queries with the &amp;ldquo;current&amp;rdquo; or &amp;ldquo;latest&amp;rdquo; version.   We had a requirement to be able to have an infrequent audit to review all or some previous versions of the document.&lt;/p&gt;

&lt;h3 id=&#34;answer&#34;&gt;Answer:&lt;/h3&gt;

&lt;p&gt;I had suggested at the time that there was a different way to achieve this that I liked better than the discussed methods and I&amp;rsquo;m going to describe it now.&lt;/p&gt;

&lt;h4 id=&#34;previous-discussion-summary&#34;&gt;Previous Discussion Summary:&lt;/h4&gt;

&lt;p&gt;Up to this point, we considered keeping versions of the same document within one MongoDB document, in separate documents within the same collection, or by &amp;ldquo;archiving off&amp;rdquo; older versions of the document into a separate collection.&lt;/p&gt;

&lt;p&gt;We looked at the trade-offs and decided that the important factors were our ability to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;return or match only the current document(s)&lt;/li&gt;
&lt;li&gt;generate new version number to &amp;ldquo;update&amp;rdquo; existing and add new attributes

&lt;ul&gt;
&lt;li&gt;including recovering from failure in the middle of a set of operations (if there is more than one)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;where-we-left-off&#34;&gt;Where we left off:&lt;/h5&gt;

&lt;p&gt;Here&amp;rsquo;s a table that shows for each schema choice that we considered how well we can handle the reads, writes and if an update has to make more than one write, how easy it is to recover or to be in a relatively &amp;ldquo;safe&amp;rdquo; state:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Schema&lt;/th&gt;
&lt;th&gt;Fetch 1&lt;/th&gt;
&lt;th&gt;Fetch Many&lt;/th&gt;
&lt;th&gt;Update&lt;/th&gt;
&lt;th&gt;Recover if fail&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1  New doc for each&lt;/td&gt;
&lt;td&gt;Easy,Fast&lt;/td&gt;
&lt;td&gt;Not easy,Slow&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1a  New doc with &amp;ldquo;current&amp;rdquo;&lt;/td&gt;
&lt;td&gt;Easy,Fast&lt;/td&gt;
&lt;td&gt;Easy,Fast&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;Hard&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2  Embedded in single doc&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3  Sep Collection for prev.&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;Medium Hard&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4  Deltas only in new doc&lt;/td&gt;
&lt;td&gt;Hard,Slow&lt;/td&gt;
&lt;td&gt;Hard,Slow&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;?  TBD&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&amp;ldquo;N/A&amp;rdquo; for recovery means there is no inconsistent state possible - if we only have to make one write to create/add a new version, we are safe from any inconsistency.  So &amp;ldquo;N/A&amp;rdquo; is the &amp;ldquo;easiest&amp;rdquo; value there.&lt;/p&gt;

&lt;p&gt;What we want is something that makes all our tasks easy, and does not have any performance issues nor consistency problems.   For creating this solution, we will pick and choose the best parts of the previously considered schema.&lt;/p&gt;

&lt;p&gt;No doubt you noticed that fetching one or many is fastest and simplest when we keep the old versioned documents out of our &amp;ldquo;current&amp;rdquo; collection.  This makes our queries whether for one or all latest versions fast and they can use indexes whether you&amp;rsquo;re querying, updating or aggregating.&lt;/p&gt;

&lt;p&gt;How do we get fast updates that keep the current document current but save the previous version somewhere else?  We know that we don&amp;rsquo;t have multi-statement transaction in MongoDB so we can&amp;rsquo;t ensure that a regular  update of one document and an insert of another document are atomic.  However, there &lt;em&gt;is&lt;/em&gt; something that&amp;rsquo;s always updated atomically along with &lt;em&gt;every&lt;/em&gt; write that happens in your collection, and that is the &amp;ldquo;Oplog&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;the-oplog&#34;&gt;The Oplog&lt;/h4&gt;

&lt;p&gt;The oplog (full name: &amp;lsquo;oplog.rs&amp;rsquo; collection in &amp;lsquo;local&amp;rsquo; database) is a special collection that&amp;rsquo;s used by the replication mechanism.  Every single write operation is persisted into the oplog atomically with being applied to the data files, indexes and the journal.  You can read more about the oplog in &lt;a href=&#34;http://docs.mongodb.org/manual/core/replica-set-oplog/&#34;&gt;the docs&lt;/a&gt;, but what I&amp;rsquo;m going to show you is what it looks like in the oplog when an insert or update happens, and how we can use that for our own purposes.&lt;/p&gt;

&lt;p&gt;If I perform this insert into my collection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.docs.insert(
           {&amp;quot;_id&amp;quot;:ObjectId(&amp;quot;5387edd9ba5871da01786f85&amp;quot;), 
            &amp;quot;docId&amp;quot;:174, &amp;quot;version&amp;quot;:1, &amp;quot;attr1&amp;quot;:165});
WriteResult({ &amp;quot;nInserted&amp;quot; : 1 })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;what I will see in the oplog will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.getSiblingDB(&amp;quot;local&amp;quot;).oplog.rs.find().sort({&amp;quot;$natural&amp;quot;:-1}).limit(-1).pretty();
{
         &amp;quot;ts&amp;quot; : Timestamp(1401417307, 1),
          &amp;quot;h&amp;quot; : NumberLong(&amp;quot;-1030581192915920539&amp;quot;), 
          &amp;quot;v&amp;quot; : 2, 
          &amp;quot;op&amp;quot; : &amp;quot;i&amp;quot;, 
          &amp;quot;ns&amp;quot; : &amp;quot;blog.docs&amp;quot;, 
          &amp;quot;o&amp;quot; : { 
                        &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5387edd9ba5871da01786f85&amp;quot;), 
                        &amp;quot;docId&amp;quot; : 174, 
                        &amp;quot;version&amp;quot; : 1, 
                        &amp;quot;attr1&amp;quot; : 165 
          } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I perform this update:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.docs.update( 
               { &amp;quot;docId&amp;quot; : 174 }, 
               { &amp;quot;$inc&amp;quot;:{&amp;quot;version&amp;quot;:1}, &amp;quot;$set&amp;quot;:{ &amp;quot;attr2&amp;quot;: &amp;quot;A-1&amp;quot; }  } 
    );
WriteResult({ &amp;quot;nMatched&amp;quot; : 1, &amp;quot;nUpserted&amp;quot; : 0, &amp;quot;nModified&amp;quot; : 1 })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;what I get in the oplog is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
        &amp;quot;ts&amp;quot; : Timestamp(1401417535, 1),
        &amp;quot;h&amp;quot; : NumberLong(&amp;quot;2381950322402503088&amp;quot;),
         &amp;quot;v&amp;quot; : 2,
         &amp;quot;op&amp;quot; : &amp;quot;u&amp;quot;,
         &amp;quot;ns&amp;quot; : &amp;quot;blog.docs&amp;quot;,
         &amp;quot;o2&amp;quot; : {
                 &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5387edd9ba5871da01786f85&amp;quot;)
         },
         &amp;quot;o&amp;quot; : {
                &amp;quot;$set&amp;quot; : {
                        &amp;quot;version&amp;quot; : 2,
                        &amp;quot;attr2&amp;quot; : &amp;quot;A-1&amp;quot;
                }
         }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out that with versioned documents, I wouldn&amp;rsquo;t actually ever do an insert, but rather I would just always do an update, with an upsert option, that way I don&amp;rsquo;t need to test if a document with this &lt;code&gt;docId&lt;/code&gt; already exists.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.docs.update( 
     { &amp;quot;docId&amp;quot; : 175 }, 
     { &amp;quot;$inc&amp;quot;:{&amp;quot;version&amp;quot;:1}, &amp;quot;$set&amp;quot;:{ &amp;quot;attr1&amp;quot;: 999 }  }, 
     { &amp;quot;upsert&amp;quot; : true } 
);
WriteResult({
    &amp;quot;nMatched&amp;quot; : 0,
    &amp;quot;nUpserted&amp;quot; : 1,
    &amp;quot;nModified&amp;quot; : 0,
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5387eff7a08472e30040b4bc&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see what the oplog entry for this upsert looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ 
    &amp;quot;ts&amp;quot; : Timestamp(1401417719, 1), 
    &amp;quot;h&amp;quot; : NumberLong(&amp;quot;2031090002854356513&amp;quot;), 
    &amp;quot;v&amp;quot; : 2, 
    &amp;quot;op&amp;quot; : &amp;quot;i&amp;quot;, 
    &amp;quot;ns&amp;quot; : &amp;quot;blog.docs&amp;quot;, 
    &amp;quot;o&amp;quot; : {
         &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5387eff7a08472e30040b4bc&amp;quot;), 
         &amp;quot;docId&amp;quot; : 175, 
         &amp;quot;version&amp;quot; : 1, 
         &amp;quot;attr1&amp;quot; : 999 
    } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like the oplog entry reflects the actual operation that was performed, &lt;strong&gt;not&lt;/strong&gt; the operation that I specified.  I asked for an update - when it&amp;rsquo;s an update, the oplog will show it as an update, when it&amp;rsquo;s turned into an upsert, the oplog will show it as an insert.  When it was an update, I had asked it to &amp;ldquo;increment&amp;rdquo; but what it put in the oplog was what the actual value saved was.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure most of you see where I&amp;rsquo;m going with this.  Rather than fumbling with creating and updating documents in the &amp;ldquo;previous versions&amp;rdquo; collection when we perform an update to a document, we can do it asynchronously, the way MongoDB secondaries do it.&lt;/p&gt;

&lt;p&gt;You may think it&amp;rsquo;s not easy, but it turns out that there are lots of &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/cursor.addOption/&#34;&gt;helpers&lt;/a&gt; for dealing with &lt;a href=&#34;http://docs.mongodb.org/manual/core/capped-collections/&#34;&gt;capped collections&lt;/a&gt; (which is what the oplog is).  One of the most useful things you can do is &amp;ldquo;tail the oplog&amp;rdquo;.  This is the same mechanism that secondaries use to find out when new writes happen on the primary: they tail the oplog the same way you can do &lt;code&gt;tail -f logfile.txt&lt;/code&gt; command - this will show you the last part of the file, but rather than giving you back the prompt when it&amp;rsquo;s done, it will just sit there and wait.  When more things are written to the file, &lt;code&gt;tail -f&lt;/code&gt; will echo them to the screen.   This is exactly how it works with &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/cursor.addOption/#example&#34;&gt;tailable cursors&lt;/a&gt; on capped collections.  If you specify the &lt;a href=&#34;http://docs.mongodb.org/meta-driver/latest/legacy/mongodb-wire-protocol/?pageVersion=106#op-query&#34;&gt;right special options&lt;/a&gt;, you can get data back, but when there is no more data, instead of timing out and having to re-query, you will just sit there and wait till more data shows up.&lt;/p&gt;

&lt;p&gt;Here is a little demo.  The code and explanations are after the video, so feel free to browse ahead before watching, or you can watch first and read the explanations after.&lt;/p&gt;

&lt;h5 id=&#34;tailing-the-oplog-to-maintain-a-copy-of-a-collection-elsewhere&#34;&gt;Tailing the oplog to maintain a copy of a collection elsewhere&lt;/h5&gt;

&lt;p&gt;For our first example, we&amp;rsquo;ll do something simple - we will watch the oplog for changes to a specific collection, and then we will apply those changes to our own copy of the collection - we will call our collection something else.  Our example stores the copy in the same database, but of course, it could be anywhere else, including in a completely different replica set or standalone server.&lt;/p&gt;

&lt;pre&gt;
&lt;script src=&#34;https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js&#34;&gt;&lt;/script&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/U-MVlb0cRHU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/pre&gt;

&lt;p&gt;Code for set-up of variables with comments:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
/* shell likes to ”page” things for us every 20 documents,  *
 * so we will increase that value for this demo */
DBQuery.shellBatchSize=200;
var namespace=&#34;blog.docs&#34;; /* the collection to watch */ 
var coll=&#34;docs_archive&#34;;  /* copy collection name */

db.getCollection(coll).drop();  /* only the very first time :) */
db.lastApplied.drop();
/* find the last timestamp we applied: this is where we restart */
var prevTS=(db.getCollection(&#34;lastApplied&#34;).count({&#34;_id&#34;:coll})==0) ?
     db.getSiblingDB(&#34;local&#34;).oplog.rs.findOne({&#34;ns&#34;:namespace}).ts :
     db.getCollection(&#34;lastApplied&#34;).findOne({&#34;_id&#34;:coll}).ts;
/* initialize or update lastApplied for this collection */
db.getCollection(&#34;lastApplied&#34;).update(
                { &#34;_id&#34; : coll }, 
                { &#34;$set : { &#34;ts&#34; : prevTS } },
                { &#34;upsert&#34; : true }
);
&lt;/pre&gt;

&lt;p&gt;Code for setting up the cursor using &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/cursor.addOption/#flags&#34;&gt;appropriate options&lt;/a&gt; allows us to find the right spot in the oplog quickly, and makes our cursor tail the data, asking server to forgo the usual cursor timeout based on inactivity:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
/* set up the cursor with appropriate filter and options */
var cursor=db.getSiblingDB(&#34;local&#34;).getCollection(&#34;oplog.rs&#34;
    ).find({&#34;ns&#34;:namespace,&#34;ts&#34;:{&#34;$gte&#34;:prevTS}}
    ).addOption(DBQuery.Option.oplogReplay
    ).addOption(DBQuery.Option.awaitData
    ).addOption(DBQuery.Option.tailable
    ).addOption(DBQuery.Option.noTimeout);
&lt;/pre&gt;

&lt;p&gt;Code running on the right-hand-side (blue screen) which loops and inserts or updates the watched collection every second:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
for ( docId = 270; docId &lt; 290; docId++ ) {
    print(&#34;waiting one second...&#34;);
    sleep(1000);
    printjson(db.docs.update(
          { &#34;_id&#34;: docId },
          { &#34;$inc&#34; : {&#34;version&#34;:1}, &#34;$set&#34;:{&#34;attr7&#34;:&#34;xxx&#34;+docId } },
          { &#34;upsert&#34; : true }));
}
&lt;/pre&gt;

&lt;p&gt;Code that fetches documents from the tailable cursor and applies appropriate changes to our &amp;ldquo;copy&amp;rdquo; collection:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
while (cursor.hasNext()) {
       
    var doc=cursor.next();
    var operation = (doc.op==&#34;u&#34;) ? &#34;update&#34; : &#34;insert&#34;;
    print(&#34;TS: &#34; + doc.ts + &#34; for &#34; + operation + &#34; at &#34; + new Date());
    
    if ( doc.op == &#34;i&#34;) {  /* originally an upsert */
        result = db.getCollection(coll).save(doc.o);
        if (result.nUpserted==1) print(&#34;Inserted doc _id &#34; + doc.o._id);
        else {
           if (result.nMatched==1 ) {
             if ( result.nModified==0) {
                 print(&#34;Doc &#34; + doc.o._id + &#34; exists.&#34;);
             } else  print(&#34;Doc &#34; + doc.o._id + &#34; may have been newer&#34;);
           } else {
             throw &#34;Insert error &#34; + tojson(doc)  + &#34; &#34; + tojson(result);
           }
        }
    } else if ( doc.op == &#34;u&#34; ) { /* originally an update */
        result = db.getCollection(coll).update(doc.o2, doc.o);
        if (result.nModified ==1) print(&#34;Updated doc _id &#34; + doc.o2._id);
        else if (result.nMatched==1 &amp;&amp; result.nModified==0) print(
                   &#34;Already updated doc _id &#34; + doc.o2._id);
        else  throw &#34;No update for &#34; + tojson(doc) + &#34; &#34; + tojson(result);
    } else if (doc.op != &#34;c&#34;) throw &#34;Unexpected op! &#34; + tojson(doc);
    
    res=db.getCollection(&#34;lastApplied&#34;).update(
            { &#34;_id&#34; : coll },
            { &#34;$set&#34; : { &#34;ts&#34; : doc.ts } }
    );

    if (res.nModified==1) print(&#34;Updated lastApplied to &#34; + doc.ts);
    else print(&#34;Repeated last applied op&#34;);

    prevTS=doc.ts; /* save in case we need to refetch from the oplog */
}
&lt;/pre&gt;
Of course this code does minimal error checking and it&#39;s not set up to automatically restart if it loses connection to the primary, or the primary changes in the replica set.  This is because here we are reading from a local oplog when in real life you may be fetching data from another server or cluster entirely.  Even so, about 15 lines of code there are for error checking and information printing, so the actual &#34;work&#34; we do is quite simple.  

##### Creating a full archive from tailing the oplog #####

Now that we know how to replay original documents to maintain an indentical &#34;copy&#34; collection, let&#39;s see what we have to do differently when we want to insert a new version of the document without losing any of the old versions.

For simplicity, I put the docId in the example collection into the `_id` field, so I will need to structure the full archive collection schema differently, since it cannot have multiple documents with the same `_id`.[^2]  For simplicity, I will let MongoDB generate the `_id` and I will use the combination of docId and version with a unique index on them to prevent duplicate versions.  I could achieve something similar by using the combination of original `_id` (which is the docId) and `version` fields as a compound `_id` field but then I would need to do more complicated transformations on the oplog entry.  I always choose the method that is  simpler.

Now when we get an insert operation in the oplog, we should be able to insert the document the same way we were doing it before, except we want to move `_id` value into `docId` field.  If the save fails to insert a new document because of a duplicate constraint violation, then we already have that docId and version - we would expect that when we are replaying the same entry in the oplog more than once.   

If we get an update, it can be one of two kinds - it can be one that sets or unsets specific fields, or it can be the kind that overwrites the entire document with a new document (with the same `_id` of course).  The latter case can be handled by the same code we have for the insert, with an appropriate transformation of the document.   If it&#39;s the `$set` and `$unset` kind, then we have to fetch the previous version of this document and apply the changes to it before inserting it as a document representing a new version.[^3]

Here is our code, with comments:

The setup:
&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
var coll=&#34;docs_full_archive&#34;;  // different collection
db.getCollection(coll).drop();     // first time only!
db.getCollection(coll).ensureIndex( 
         { &#34;docId&#34;:1, &#34;version&#34;: 1 },
         { &#34;unique&#34; : true, &#34;background&#34; : true } );
if (db.getCollection(&#34;lastApplied&#34;).count({&#34;_id&#34;:coll})==0) {
   prevTS=db.getSiblingDB(&#34;local&#34;).oplog.rs.findOne({&#34;ns&#34;:namespace}).ts;
   db.getCollection(&#34;lastApplied&#34;).update( { &#34;_id&#34; : coll }, 
      {&#34;$set&#34; : { &#34;ts&#34; : prevTS } }, { &#34;upsert&#34; : true } );
} else {
   prevTS=db.getCollection(&#34;lastApplied&#34;).findOne({&#34;_id&#34;:coll}).ts;
}
&lt;/pre&gt;
The cursor (same as before):
&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
var cursor=db.getSiblingDB(&#34;local&#34;).getCollection(&#34;oplog.rs&#34;
       ).find({&#34;ns&#34;:namespace,&#34;ts&#34;:{&#34;$gte&#34;:prevTS}}
       ).addOption(DBQuery.Option.oplogReplay
       ).addOption(DBQuery.Option.awaitData
       ).addOption(DBQuery.Option.tailable
       ).addOption(DBQuery.Option.noTimeout);
&lt;/pre&gt;
The worker loop (slightly adjusted):
&lt;pre class=&#34;prettyprint lang-java&#34;&gt;
while (cursor.hasNext()) {
    var doc=cursor.next();
    var operation = (doc.op==&#34;u&#34;) ? &#34;update&#34; : &#34;insert&#34;;
    var id = (doc.op==&#34;u&#34;) ? doc.o2._id : doc.o._id;
    var newDoc={ };
    print(&#34;TS: &#34; + doc.ts + &#34; for &#34; + operation + &#34; at &#34; + new Date());
    if ( doc.op == &#34;i&#34; || 
            (doc.op == &#34;u&#34; &amp;&amp; doc.o.hasOwnProperty(&#34;_id&#34;)) ) {
        for (i in doc.o) {
                if (i==&#39;_id&#39;) newDoc.docId=doc[&#34;o&#34;][i];
                else newDoc[i]=doc[&#34;o&#34;][i];
        }
    } else if ( doc.op == &#34;u&#34; ) {
        /* create new doc out of old document and the sets and unsets */
        var prevVersion = { &#34;docId&#34; : doc.o2._id, 
                     &#34;version&#34; : doc.o[&#34;$set&#34;][&#34;version&#34;]-1 };
        var prevDoc = db.getCollection(coll).findOne(&#34;prevVersion&#34;, {&#34;_id&#34;:0});
        if (prevDoc == null) {
                     throw &#34;Couldn&#39;t find previous version in archive! &#34; + 
                                  tojson(prevVersion) + tojson(doc);
        }
        newDoc = prevDoc;
        if (doc.o.hasOwnProperty(&#34;$set&#34;)) {
            for (i in doc.o[&#34;$set&#34;]) {
                newDoc[i]=doc.o[&#34;$set&#34;][i];
            }
        } 
        if (doc.o.hasOwnProperty(&#34;$unset&#34;)) { 
            for (i in doc.o[&#34;$unset&#34;]) {
                delete(newDoc[i]);
            }
        }
    } else if (doc.op != &#34;c&#34;) throw &#34;Unexpected op! &#34; + tojson(doc);

    var  result = db.getCollection(coll).insert(newDoc);
    if (result.nInserted==1) {
       print(&#34;Inserted doc &#34; + 
                newDoc.docId + &#34; version &#34; + newDoc.version);
    } else {
       if (result.getWriteError().code==11000 ) {
           print(&#34;Doc &#34; + newDoc.docId + &#34; version &#34; + 
                  newDoc.version + &#34; already exists.&#34;);
       } else throw &#34;Error inserting &#34; + tojson(doc)  + 
                  &#34; as &#34; + tojson(newDoc)+ &#34;Result &#34; + tojson(result);
    }

    var res=db.getCollection(&#34;lastApplied&#34;).update(
             { &#34;_id&#34; : coll },
             { &#34;$set&#34; : {ts:doc.ts} },
             { &#34;upsert&#34; : true }
    );
    var prevTS=doc.ts;
    print(&#34;Set lastApplied to &#34; + doc.ts);
}
&lt;/pre&gt;

&lt;p&gt;It turns out that the loop will be slightly simpler because no matter what comes in, we will always do an insert into the full archive collection.&lt;/p&gt;

&lt;h5 id=&#34;test-it-out&#34;&gt;Test it out!&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s run this code and then compare for a single docId the operations in the oplog, and what we end up with in the archive collection:&lt;/p&gt;

&lt;p&gt;The oplog entries:
&lt;pre class=&#34;prettyprint lang-java&#34;&gt;
db.getSiblingDB(&amp;ldquo;local&amp;rdquo;).getCollection(&amp;ldquo;oplog.rs&amp;rdquo;).find( {
            &amp;ldquo;ns&amp;rdquo; : namespace,
            &amp;ldquo;$or&amp;rdquo; : [ { &amp;ldquo;o._id&amp;rdquo; : 279 }, { &amp;ldquo;o2._id&amp;rdquo; : 279 } ]
         },
         { &amp;ldquo;o&amp;rdquo; : 1 } );
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;_id&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 1, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo; } }
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;$set&amp;rdquo; : { &amp;ldquo;version&amp;rdquo; : 2 } } }
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;$set&amp;rdquo; : { &amp;ldquo;version&amp;rdquo; : 3, &amp;ldquo;attrCounter&amp;rdquo; : 1, &amp;ldquo;attr9&amp;rdquo; : 1, &amp;ldquo;attrArray&amp;rdquo; : [ &amp;ldquo;xxx&amp;rdquo; ] } } }
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;_id&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 4, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo;, &amp;ldquo;attrCounter&amp;rdquo; : 1, &amp;ldquo;attr9&amp;rdquo; : 1, &amp;ldquo;attrArray&amp;rdquo; : [ &amp;ldquo;xxx&amp;rdquo; ], &amp;ldquo;attrNew&amp;rdquo; : &amp;ldquo;abc&amp;rdquo; } }
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;_id&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 5, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo;, &amp;ldquo;attrCounter&amp;rdquo; : 2, &amp;ldquo;attr9&amp;rdquo; : 1, &amp;ldquo;attrArray&amp;rdquo; : [ &amp;ldquo;xxx&amp;rdquo; ], &amp;ldquo;attrNewReplacement&amp;rdquo; : &amp;ldquo;abc&amp;rdquo; } }
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;$set&amp;rdquo; : { &amp;ldquo;version&amp;rdquo; : 6, &amp;ldquo;attrCounter&amp;rdquo; : 3, &amp;ldquo;attrArray&amp;rdquo; : [ ] }, &amp;ldquo;$unset&amp;rdquo; : { &amp;ldquo;attr9&amp;rdquo; : true } } }
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;_id&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 7 } }
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;$set&amp;rdquo; : { &amp;ldquo;version&amp;rdquo; : 8, &amp;ldquo;attrCounter&amp;rdquo; : 1, &amp;ldquo;a&amp;rdquo; : 1 } } }
{ &amp;ldquo;o&amp;rdquo; : { &amp;ldquo;$set&amp;rdquo; : { &amp;ldquo;version&amp;rdquo; : 9 }, &amp;ldquo;$unset&amp;rdquo; : { &amp;ldquo;a&amp;rdquo; : true, &amp;ldquo;attrCounter&amp;rdquo; : true } } }
&lt;/pre&gt;
The archive collection contents (slightly formatted for readability):
&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
db.docs_full_archive.find( {&amp;ldquo;docId&amp;rdquo;:279}, {&amp;rdquo;_id&amp;rdquo;:0} )
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 1, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo; }
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 2, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo; }
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 3, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo;,
   &amp;ldquo;attrCounter&amp;rdquo; : 1, &amp;ldquo;attr9&amp;rdquo; : 1, &amp;ldquo;attrArray&amp;rdquo; : [ &amp;ldquo;xxx&amp;rdquo; ] }
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 4, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo;,
   &amp;ldquo;attrCounter&amp;rdquo; : 1, &amp;ldquo;attr9&amp;rdquo; : 1, &amp;ldquo;attrArray&amp;rdquo; : [ &amp;ldquo;xxx&amp;rdquo; ], &amp;ldquo;attrNew&amp;rdquo; : &amp;ldquo;abc&amp;rdquo; }
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 5, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo;,
   &amp;ldquo;attrCounter&amp;rdquo; : 2, &amp;ldquo;attr9&amp;rdquo; : 1, &amp;ldquo;attrArray&amp;rdquo; : [ &amp;ldquo;xxx&amp;rdquo; ], &amp;ldquo;attrNewReplacement&amp;rdquo; : &amp;ldquo;abc&amp;rdquo; }
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 6, &amp;ldquo;attr7&amp;rdquo; : &amp;ldquo;xxx279&amp;rdquo;,
   &amp;ldquo;attrCounter&amp;rdquo; : 3, &amp;ldquo;attr9&amp;rdquo; : 1, &amp;ldquo;attrArray&amp;rdquo; : [ ], &amp;ldquo;attrNewReplacement&amp;rdquo; : &amp;ldquo;abc&amp;rdquo; }
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 7 }
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 8, &amp;ldquo;attrCounter&amp;rdquo; : 1, &amp;ldquo;a&amp;rdquo; : 1 }
{ &amp;ldquo;docId&amp;rdquo; : 279, &amp;ldquo;version&amp;rdquo; : 9, &amp;ldquo;attrCounter&amp;rdquo; : 1, &amp;ldquo;a&amp;rdquo; : 1 }
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;There you have it, my preferred way to isolate an infrequently used collection and keep it updated based on every write action that happens in the main DB.  I hope you can see how this can be extended for many different pub/sub needs as you can adapt your code to watch for different types of events on different collections.&lt;/p&gt;

&lt;p&gt;Hope you found this educational and keep those questions coming!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Because the oplog must write change operations in &lt;a href=&#34;http://docs.mongodb.org/manual/reference/glossary/#term-idempotent&#34;&gt;&amp;ldquo;idemponent&amp;rdquo;&lt;/a&gt; form, all update operators are transformed into their equivalent &lt;code&gt;$set&lt;/code&gt; operations.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to Merge Shapes with Aggregation Framework</title>
      <link>http://asya999.github.io/post/mergeshapes/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/mergeshapes/</guid>
      <description>

&lt;h3 id=&#34;question&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;Consider two separate shapes of data like this in a single collection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{   type: &amp;quot;A&amp;quot;,
    level: 0,
    color: &amp;quot;red&amp;quot;,
    locale: &amp;quot;USA&amp;quot;
}
{   type: &amp;quot;A&amp;quot;,
    level: 1,
    color: &amp;quot;blue&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The goal is to present a merged shape to the application with the level n data overridden by level n+1 if level n+1 data exists for type A, starting with n = 0.  In other words, the app wants to see this shape:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{   type: &amp;quot;A&amp;quot;,
    level: 1, 
    color: &amp;quot;blue&amp;quot;,
    locale: &amp;quot;USA&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If no level 1 data exists, the app would see the default (level 0) shape.   Think of it as a layered merge.&lt;/p&gt;

&lt;h3 id=&#34;answer&#34;&gt;Answer:&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&#34;http://askasya.com/post/trackversions&#34;&gt;previous &amp;ldquo;AskAsya&amp;rdquo; on tracking versions&lt;/a&gt; we looked at different ways of tracking all versions of changing objects, and this happens to be a complex variant of that problem that we considered as &amp;ldquo;schema 4&amp;rdquo; - it&amp;rsquo;s a possible approach to versioning, but it presents an interesting challenge returning the &amp;ldquo;full&amp;rdquo; current object back to the client.&lt;/p&gt;

&lt;h4 id=&#34;merging-different-shapes&#34;&gt;Merging Different Shapes&lt;/h4&gt;

&lt;p&gt;This problem would be easily solved with aggregation framework query, except for the problem that we need to know the names of all the keys/fields, and we might not  know all of the possible fields that could exist in our documents. Without this information, the only way we have of merging documents is using MapReduce, which is both more complex &lt;em&gt;and&lt;/em&gt; slower.   I will show both solutions and I&amp;rsquo;ll leave it up to you to determine which will be more performant in your scenario (or whether you want to switch to a different versioning schema).&lt;/p&gt;

&lt;h5 id=&#34;aggregation-framework&#34;&gt;Aggregation Framework&lt;/h5&gt;

&lt;p&gt;This will be the fastest way if you either have all possible attribute names that your documents could have, or get them via a scan of the entire collection (note that the latter immediately becomes stale, as new documents with new attributes could show up as soon as you start querying, but that&amp;rsquo;s inherently an issue that always exists in any system that doesn&amp;rsquo;t provide repeatable read isolation).&lt;/p&gt;

&lt;p&gt;Get the possible attribute names (I&amp;rsquo;m assuming &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;level&lt;/code&gt; are your &amp;lsquo;id&amp;rsquo; and &amp;lsquo;version&amp;rsquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var att = { };
var attrs = [ ];
db.coll.find( {}, {_id:0, type:0, level:0} ).forEach( function(d) {
    for ( i in d)
         if ( !att.hasOwnProperty(i) ) {
             att[i]=1;
             attrs.push(i);
         }
} );                   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now have an array &lt;code&gt;attrs&lt;/code&gt; which holds all the strings representing different attributes in your collection.&lt;/p&gt;

&lt;p&gt;We now programmatically generate stage for &lt;code&gt;$project&lt;/code&gt; that turns each attribute into a subdocument with its level first and attribute itself second.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;proj1={$project:{type:1, level:1}};
attrs.forEach(function(attr) { 
    _a=&amp;quot;_&amp;quot;+attr; 
    a=&amp;quot;$&amp;quot;+attr;   
    proj1[&amp;quot;$project&amp;quot;][_a]={}; 
    proj1[&amp;quot;$project&amp;quot;][_a][&amp;quot;l&amp;quot;]={&amp;quot;$cond&amp;quot;:{}};
    proj1[&amp;quot;$project&amp;quot;][_a][&amp;quot;l&amp;quot;][&amp;quot;$cond&amp;quot;]={if:{&amp;quot;$gt&amp;quot;:[a,null]},then:&amp;quot;$level&amp;quot;,else:-1};
    proj1[&amp;quot;$project&amp;quot;][_a][attr]=a;
} );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since levels are increasing, this set us to be able to &lt;code&gt;$group&lt;/code&gt; using the &lt;code&gt;$max&lt;/code&gt; operator to keep the highest level for each attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;group={$group:{_id:&amp;quot;$type&amp;quot;,lvl:{$max:&amp;quot;$level&amp;quot;}}};
attrs.forEach(function(attr) { 
    a=&amp;quot;$_&amp;quot;+attr;
    group[&amp;quot;$group&amp;quot;][attr]={&amp;quot;$max&amp;quot;:a};
} )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last &lt;code&gt;$project&lt;/code&gt; just transforms the fields of our document back into the same key names they had before.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;proj2={$project:{_id:0,type:&amp;quot;$_id&amp;quot;, level:&amp;quot;$lvl&amp;quot;}}
attrs.forEach(function(attr) {
    a=&amp;quot;$&amp;quot;+attr;  
    proj2[&amp;quot;$project&amp;quot;][attr]=a+&amp;quot;.&amp;quot;+attr;
} )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are now all set to run the aggregation with your programmatically generated stages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.coll.aggregate( proj1, group, proj2 );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To recap,&lt;code&gt;proj1&lt;/code&gt; is the stage where we converted every attribute into a subdocument which included &amp;ldquo;level&amp;rdquo; (first) and attribute value (second).  If a given attribute didn&amp;rsquo;t exist in a document, it went in with level:-1 and value:null.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;group&lt;/code&gt; is where we grouped by &lt;code&gt;type&lt;/code&gt; which is our &lt;code&gt;docId&lt;/code&gt; and kept the highest (max) &amp;ldquo;subdocument&amp;rdquo; for each possible attribute.  This works because MongoDB allows you to compare any types (including BSON) and level:-1 is always going to &amp;ldquo;lose&amp;rdquo; to a higher level.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;proj2&lt;/code&gt; is when we turned all the fields into readable format, or at least format resembling our initial document.&lt;/p&gt;

&lt;p&gt;This now returned to us the merged documents.&lt;/p&gt;

&lt;p&gt;If we had original documents like these:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.coll.find({},{_id:0}).sort({type:1,level:1})
{ &amp;quot;type&amp;quot; : &amp;quot;A&amp;quot;, &amp;quot;level&amp;quot; : 0, &amp;quot;color&amp;quot; : &amp;quot;red&amp;quot;, &amp;quot;locale&amp;quot; : &amp;quot;USA&amp;quot; }
{ &amp;quot;type&amp;quot; : &amp;quot;A&amp;quot;, &amp;quot;level&amp;quot; : 1, &amp;quot;color&amp;quot; : &amp;quot;blue&amp;quot; }
{ &amp;quot;type&amp;quot; : &amp;quot;A&amp;quot;, &amp;quot;level&amp;quot; : 2, &amp;quot;priority&amp;quot; : 5 }
{ &amp;quot;type&amp;quot; : &amp;quot;A&amp;quot;, &amp;quot;level&amp;quot; : 3, &amp;quot;locale&amp;quot; : &amp;quot;EMEA&amp;quot; }
{ &amp;quot;type&amp;quot; : &amp;quot;B&amp;quot;, &amp;quot;level&amp;quot; : 0, &amp;quot;priority&amp;quot; : 1 }
{ &amp;quot;type&amp;quot; : &amp;quot;B&amp;quot;, &amp;quot;level&amp;quot; : 1, &amp;quot;color&amp;quot; : &amp;quot;purple&amp;quot;, &amp;quot;locale&amp;quot; : &amp;quot;Canada&amp;quot; }
{ &amp;quot;type&amp;quot; : &amp;quot;B&amp;quot;, &amp;quot;level&amp;quot; : 2, &amp;quot;color&amp;quot; : &amp;quot;green&amp;quot; }
{ &amp;quot;type&amp;quot; : &amp;quot;B&amp;quot;, &amp;quot;level&amp;quot; : 3, &amp;quot;priority&amp;quot; : 2, &amp;quot;locale&amp;quot; : &amp;quot;USA&amp;quot; }
{ &amp;quot;type&amp;quot; : &amp;quot;B&amp;quot;, &amp;quot;level&amp;quot; : 4, &amp;quot;color&amp;quot; : &amp;quot;NONE&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We got back results that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.coll.aggregate( proj1, group, proj2 );
{ &amp;quot;color&amp;quot; : &amp;quot;NONE&amp;quot;, &amp;quot;locale&amp;quot; : &amp;quot;USA&amp;quot;, &amp;quot;priority&amp;quot; : 2, &amp;quot;type&amp;quot; : &amp;quot;B&amp;quot;, &amp;quot;level&amp;quot; : 4 }
{ &amp;quot;color&amp;quot; : &amp;quot;blue&amp;quot;, &amp;quot;locale&amp;quot; : &amp;quot;EMEA&amp;quot;, &amp;quot;priority&amp;quot; : 5, &amp;quot;type&amp;quot; : &amp;quot;A&amp;quot;, &amp;quot;level&amp;quot; : 3 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is not performant for filtering on attributes since we can&amp;rsquo;t apply the filter until we have &amp;ldquo;merged&amp;rdquo; all the documents, and that means that indexes can&amp;rsquo;t be used effectively.  While this aggregation may be a good exercise, unless you are saving this output into a new collection that you then index by attributes for querying, it won&amp;rsquo;t be a good schema if you need very fast responses.&lt;/p&gt;

&lt;p&gt;Here is MapReduce for the same functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map = function () {
    var doc=this;
    delete(doc._id);
    var level=this.level;
    delete(doc.level);
    var t=this.type;
    delete(doc.type);
    for (i in doc) {
         val={level:level};
         val[i]={ l:level, v:doc[i]};
         emit(t, val);
    }
}

reduce = function (key,values) {
  result={level:-1};
  values.forEach(function(val) {
    if (result.level&amp;lt;val.level) result.level=val.level;
    var attr=null;
    for (a in val) if (a!=&amp;quot;level&amp;quot;) { attr=a; break; }
    if (!result.hasOwnProperty(attr) || result[attr].l&amp;lt;=val[attr].l) {
          result[attr]=val[attr];

    }
  })
  return result;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to Track Versions with MongoDB</title>
      <link>http://asya999.github.io/post/trackversions/</link>
      <pubDate>Wed, 21 May 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/trackversions/</guid>
      <description>

&lt;h3 id=&#34;question&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;Consider requirement that we have to be able to recreate/query any version of a document that ever existed in a particular collection.   So we start out with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{   docId: &amp;quot;A&amp;quot;,
    version: 1,
    color: &amp;quot;red&amp;quot;,
    locale: &amp;quot;USA&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we need to set color to &amp;ldquo;blue&amp;rdquo;, instead of updating the &amp;ldquo;color&amp;rdquo; field from &amp;ldquo;red&amp;rdquo; to &amp;ldquo;blue&amp;rdquo;, we have to create a new version of the document which now has its full &amp;ldquo;current&amp;rdquo; state, and preserve somehow the old version of the document.   So we insert&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{   docId: &amp;quot;A&amp;quot;,
    version: 2,
    color: &amp;quot;blue&amp;quot;,
    locale: &amp;quot;USA&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The goal is to preserve every state for each object, but we only respond to queries with the &amp;ldquo;current&amp;rdquo; or &amp;ldquo;latest&amp;rdquo; version, we just have a requirement to be able to have an audit (which would be very infrequent so it&amp;rsquo;s okay if it&amp;rsquo;s slow).    Is keeping each version as we do in this example the best schema/approach to this problem?&lt;/p&gt;

&lt;h3 id=&#34;answer&#34;&gt;Answer:&lt;/h3&gt;

&lt;p&gt;Versioning can be tricky to get right if you don&amp;rsquo;t know all of the requirements of the application and approximate expected loads for various operations.  I&amp;rsquo;ll lay out a few possible approaches and point out their strength and weaknesses.&lt;/p&gt;

&lt;h4 id=&#34;problem-statement&#34;&gt;Problem Statement:&lt;/h4&gt;

&lt;p&gt;In some systems, rather than updating an existing object and overwriting its various attributes there is a business requirement to preserve the original document and to create a new version of this document, instead of updating it.  This raises the following interesting challenges:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You must correctly generate the new version number in a multithreaded system&lt;/li&gt;
&lt;li&gt;You must return only the current version of each document when there is a query&lt;/li&gt;
&lt;li&gt;You must &amp;ldquo;update&amp;rdquo; correctly by including all current attributes in addition to newly provided attributes&lt;/li&gt;
&lt;li&gt;If the system fails at any point, you must either have a consistent state of the data, or it must be possible on re-start to infer the state of the data and clean it up, or otherwise bring it to consistent state.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;possible-schema-approaches&#34;&gt;Possible Schema Approaches:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Store full document each write with monotonically increasing version number.

&lt;ul&gt;
&lt;li&gt;1a. possibily with a field in latest version identifying it as such.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Store all document versions inside a single document.&lt;/li&gt;
&lt;li&gt;Store current document in your &amp;ldquo;primary&amp;rdquo; collection, and keep previous versions in a second collection.&lt;/li&gt;
&lt;li&gt;Store only &amp;ldquo;deltas&amp;rdquo; with each increasing version.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;generating-correct-version-number&#34;&gt;Generating correct version number&lt;/h5&gt;

&lt;p&gt;No matter which schema you choose, the issue of generating the correct &amp;ldquo;higher&amp;rdquo; version number will come down to one of three possible approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;maintain a separate collection which hands out the next version for each document. This is probably the worst approach as it can be prone to contention and edge cases in multi-shard, multithreaded environment.&lt;/li&gt;
&lt;li&gt;use optimistic locking to read the current document, increment its version and save new document contingent on some constraint keeping you from succeeding simultaneously from two different threads.  This can be handled differently for different schemas, and it&amp;rsquo;s definitely a common and feasible approach.&lt;/li&gt;
&lt;li&gt;use a fine-grain timestamp - current time to the millisecond may be good enough, depending on your ability to synchronize all the clocks, unfortunately it only works with two of our four schema options.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like optimistic locking option and it works well with all four of our schema options.  It involves a &amp;ldquo;compare-and-swap&amp;rdquo; technique where you read the current document,  do the appropriate calculation of new version and adding new attributes, and then try the insert or update, contingent on no one having updated the document ahead of you.  If it&amp;rsquo;s an update, you include parts of the original document in your query condition, and if it&amp;rsquo;s an insert you must have a unique constraint to prevent success of multiple simultaneous attempts to version the same document.   In both cases you must check the result of your write - knowing if it succeeded or failed is how the thread knows it has to try again.&lt;/p&gt;

&lt;h4 id=&#34;how-does-each-schema&#34;&gt;How does each schema:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;return only the current document&lt;/li&gt;
&lt;li&gt;generate new version number to &amp;ldquo;update&amp;rdquo; existing and add new attributes

&lt;ul&gt;
&lt;li&gt;this includes recovering from failure in the middle of a set of operations (if there is more than one)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;choice-1&#34;&gt;Choice 1&lt;/h5&gt;

&lt;p&gt;Store full document each time there is a write with monotonically increasing version number inside.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {  &amp;quot;docId&amp;quot; : 174, &amp;quot;v&amp;quot; : 1,  &amp;quot;attr1&amp;quot;: 165 }   /*version 1 */
    {  &amp;quot;docId&amp;quot; : 174, &amp;quot;v&amp;quot; : 2,  &amp;quot;attr1&amp;quot;: 165, &amp;quot;attr2&amp;quot;: &amp;quot;A-1&amp;quot; } 
    {  &amp;quot;docId&amp;quot; : 174, &amp;quot;v&amp;quot; : 3,  &amp;quot;attr1&amp;quot;: 184, &amp;quot;attr2&amp;quot; : &amp;quot;A-1&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each docId value the document with the highest &amp;ldquo;v&amp;rdquo; represents the full current object state.  In this example, docId 174 v:3 represents the total current state.   There is a unique index on &lt;code&gt;{&amp;quot;docId&amp;quot;:1,&amp;quot;v&amp;quot;:1}&lt;/code&gt;&lt;/p&gt;

&lt;h6 id=&#34;to-return-only-current-document&#34;&gt;To return only current document&lt;/h6&gt;

&lt;p&gt;If the query is for a single docId, the query would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.docs.find({&amp;quot;docId&amp;quot;:174}).sort({&amp;quot;v&amp;quot;:-1}).limit(-1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will find the documents with &amp;ldquo;docId&amp;rdquo; 174 and return the one that has the highest &amp;ldquo;v&amp;rdquo; only.  This will efficiently use our index on docId and v to only scan a single document.  The &lt;code&gt;-1&lt;/code&gt; for &lt;code&gt;limit&lt;/code&gt; just tells the server to close the cursor when the document is returned as we are done with it (it&amp;rsquo;s what &lt;code&gt;findOne&lt;/code&gt; functionally does under the covers).&lt;/p&gt;

&lt;p&gt;But what if you want to query for all documents that match a particular condition, but what you expect is that only the latest version of each document would be returned?   Now you have to use the aggregation framework to &amp;ldquo;merge&amp;rdquo; your document set to only keep those with the highest version and apply your filter then:&lt;/p&gt;

&lt;p&gt;Careful that you don&amp;rsquo;t do it the &lt;strong&gt;wrong&lt;/strong&gt; way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.docs.aggregate( [  
    {&amp;quot;$match&amp;quot;:{&amp;lt;your-match-condition&amp;gt;}}, /* WRONG */
    {&amp;quot;$sort&amp;quot;:{&amp;quot;docId&amp;quot;:-1,&amp;quot;v&amp;quot;:-1}},
    {&amp;quot;$group&amp;quot;:{&amp;quot;_id&amp;quot;:&amp;quot;$docId&amp;quot;,&amp;quot;doc&amp;quot;:{&amp;quot;$first&amp;quot;:&amp;quot;$$ROOT&amp;quot;}}}
] )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that applying your filter &lt;em&gt;before&lt;/em&gt; you filter out all but the latest version of each document may not return the current version of some of the documents!   So &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; do this!&lt;/p&gt;

&lt;p&gt;Instead we have to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sort={&amp;quot;$sort&amp;quot;: { &amp;quot;documentId&amp;quot; : 1, &amp;quot;version&amp;quot; : -1 } };
group={&amp;quot;$group&amp;quot; : { &amp;quot;_id&amp;quot; : &amp;quot;$documentId&amp;quot;,
                    &amp;quot;doc&amp;quot;: { &amp;quot;$first&amp;quot; : &amp;quot;$$ROOT&amp;quot; }
                   } };
match={&amp;quot;$match&amp;quot;:{&amp;quot;doc.attrN&amp;quot;:&amp;lt;value&amp;gt;}}; /* RIGHT */
db.collection.aggregate( sort, group, match )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is not efficient, sadly, as the indexes on our collection can only be effectively used &lt;strong&gt;before&lt;/strong&gt; the first group operation.&lt;/p&gt;

&lt;h6 id=&#34;to-generate-new-version-and-update&#34;&gt;To generate new version and update&lt;/h6&gt;

&lt;p&gt;Optimistic locking: each thread reads in the most current document (in this case &lt;code&gt;docId:174, v:3&lt;/code&gt;) makes attribute changes, increments &lt;code&gt;v&lt;/code&gt; by one and then tries the insert of this document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.docs.insert({&amp;quot;docId&amp;quot;:174,&amp;quot;v&amp;quot;:4, &amp;quot;attr1&amp;quot;:184,&amp;quot;attr2&amp;quot;:&amp;quot;A-1&amp;quot;,&amp;quot;attr3&amp;quot;:&amp;quot;blue&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the insert succeeds, it&amp;rsquo;s done, but if it gets a unique constraint violation, it means another thread has already inserted a new version of this document, and this thread needs to try again (making sure to read the new &lt;code&gt;&amp;quot;v&amp;quot;:4&amp;quot;&lt;/code&gt; or whatever the latest version of the document is and trying its change till it succeeds.&lt;/p&gt;

&lt;p&gt;Failure does &lt;em&gt;not&lt;/em&gt; create an inconsistent state, since there is only a single write.&lt;/p&gt;

&lt;h5 id=&#34;choice-1a&#34;&gt;Choice 1a&lt;/h5&gt;

&lt;p&gt;In a variant of 1. we might add a field in the &amp;ldquo;current&amp;rdquo; version of each documentId&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     {  &amp;quot;docId&amp;quot; : 174, &amp;quot;v&amp;quot; : 1,  &amp;quot;attr1&amp;quot;: 165 }
     {  &amp;quot;docId&amp;quot; : 174, &amp;quot;v&amp;quot; : 2,  &amp;quot;attr1&amp;quot;: 165, &amp;quot;attr2&amp;quot;: &amp;quot;A-1&amp;quot; }
     {  &amp;quot;docId&amp;quot; : 174, &amp;quot;v&amp;quot; : 3,  &amp;quot;attr1&amp;quot;: 184, &amp;quot;attr2&amp;quot; : &amp;quot;A-1&amp;quot;, current: true }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fetching the current document should now be easy, just query for { docId:174, current:true }, and when querying for multiple documents, add {&amp;ldquo;current&amp;rdquo;:true} to the query predicate, solving that problem.&lt;/p&gt;

&lt;p&gt;Updating becomes difficult now, since there is no method to insert one document and update another document &amp;ldquo;as one&amp;rdquo;.  So we would want to first insert a new version, based on currently highest version, and then  update the previously current document to $unset the &amp;ldquo;current&amp;rdquo; field.&lt;/p&gt;

&lt;p&gt;Now if our process fails between those two write operations, we will have two documents for a particular docId that have &amp;ldquo;current&amp;rdquo; set to true and that means all of our queries will have to guard against that possibility - that  seems unnecessarily complex, so let&amp;rsquo;s hold off on this method for now.&lt;/p&gt;

&lt;h5 id=&#34;choice-2&#34;&gt;Choice 2&lt;/h5&gt;

&lt;p&gt;Store all document versions inside a single document.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {  &amp;quot;_id&amp;quot; : 174, &amp;quot;current&amp;quot; : { &amp;quot;v&amp;quot; :3, &amp;quot;attr1&amp;quot;: 184, &amp;quot;attr2&amp;quot; : &amp;quot;A-1&amp;quot; },
        &amp;quot;prev&amp;quot; : [ 
              {  &amp;quot;v&amp;quot; : 1,  &amp;quot;attr1&amp;quot;: 165 },
              {  &amp;quot;v&amp;quot; : 2,  &amp;quot;attr1&amp;quot;: 165, &amp;quot;attr2&amp;quot;: &amp;quot;A-1&amp;quot; }
        ]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each docId, the current state is represented by its &amp;ldquo;current&amp;rdquo; subdocument.   Since &amp;ldquo;docId&amp;rdquo; is unique it can be stored in the &amp;ldquo;_id&amp;rdquo; field.&lt;/p&gt;

&lt;p&gt;The merits of multiple possible solutions mostly depend on how many versions of each object you expect to have and how long you have to keep them.  If the lifetime of a document usually has a number of versions that are in the single digits or low double digits, you can do well embedding the versions inside of the single document that represents each object.&lt;/p&gt;

&lt;h6 id=&#34;to-return-only-current-document-1&#34;&gt;To return only current document&lt;/h6&gt;

&lt;p&gt;Since there is only one document, we just search by docId or other attributes of &amp;ldquo;current&amp;rdquo; and we use projection to exclude the previous array: &lt;code&gt;db.collection.find({&amp;quot;docId&amp;quot;:174}, {&amp;quot;prev&amp;quot;:0})&lt;/code&gt; except in cases we want to see it.&lt;/p&gt;

&lt;h6 id=&#34;to-generate-new-version-and-update-1&#34;&gt;To generate new version and update&lt;/h6&gt;

&lt;p&gt;Even though you only have one document per docId, you really can&amp;rsquo;t create a new version with a single update, since it depends on knowing what the current subdocument is, but what you can do is utilize the &amp;ldquo;compare-and-swap&amp;rdquo; technique where you read the current document, move &amp;ldquo;current&amp;rdquo; field to the end of the previous array, set the new &amp;ldquo;current&amp;rdquo; field appropriately, and then do the update &lt;strong&gt;contingent on no one having updated the document ahead of you&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var doc = db.collection.findOne( { &amp;quot;_id&amp;quot; : 174 });
/* save the current version */
var currVersion = doc.current.v;
/* push the current subdocument to the end of prev array */
doc.prev.push(doc.current);
/* construct the new &amp;quot;current&amp;quot; subdocument */
doc.current = { &amp;quot;v&amp;quot; : currVersion+1, &amp;quot;attr1&amp;quot; : &amp;lt;value&amp;gt;, &amp;quot;attr2&amp;quot; : &amp;lt;value&amp;gt; }
var result = db.collection.update( { &amp;quot;_id&amp;quot; : 174, &amp;quot;current.v&amp;quot; : currVersion },  { &amp;quot;$set&amp;quot; : doc } )
if (result.nModified != 1) {
    print(&amp;quot;Someone must have gotten there first, re-fetch the new document, try again&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;atomicity-and-maintainability&#34;&gt;atomicity and maintainability&lt;/h6&gt;

&lt;p&gt;There are many pros in this approach:
- atomic updates of document (single operation both, sets new current and updates previous)
- querying only needs to happen on &amp;ldquo;current&amp;rdquo; attributes, since you only need to access previous infrequently
- it&amp;rsquo;s simple to return just current attributes or to exclude previous from being returned to the application
- the &lt;code&gt;_id&lt;/code&gt; index can be used for the unique docId preventing duplicates being accidentally inserted
- creating the next version number is simple and thread-safe&lt;/p&gt;

&lt;p&gt;The cons are all performance based:
- when each document grows beyond its previously allocated size, it has to be moved which makes some updates more time consuming
- this won&amp;rsquo;t work at all for documents that have thousands of versions over their lifetime (the documents would get too big, unwieldy, and could potentially exceed 16MB limit)
- there&amp;rsquo;ll likely be more fragmentation than with the more &amp;ldquo;naive&amp;rdquo; approach of inserting new versions as new documents
- if the system has a very high level of concurrency when multiple threads are trying to each make different update to a specific document, a single thread could keep getting beat and it might take multiple re-tries to persist its update&lt;/p&gt;

&lt;p&gt;The last &amp;ldquo;con&amp;rdquo; shouldn&amp;rsquo;t really be a concern if you are genuinely talking about a system where each document is only going to have a handful of versions (or updates) in its lifecycle, and this schema isn&amp;rsquo;t appropriate for systems where a single document will live through hundreds (or thousands) of updates.&lt;/p&gt;

&lt;h5 id=&#34;choice-3&#34;&gt;Choice 3&lt;/h5&gt;

&lt;p&gt;Store current document in your &amp;ldquo;primary&amp;rdquo; collection, and keep older versions in another collection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    CurrentCollection:     {  &amp;quot;docId&amp;quot; : 174,  &amp;quot;v&amp;quot; :3, &amp;quot;attr1&amp;quot;: 184, &amp;quot;attr2&amp;quot; : &amp;quot;A-1&amp;quot; }
    CollectionOfPrevious:
              {  &amp;quot;docId&amp;quot; : 174, &amp;quot;v&amp;quot; : 1,  &amp;quot;attr1&amp;quot;: 165 }
              {  &amp;quot;docId&amp;quot; : 174, &amp;quot;v&amp;quot; : 2,  &amp;quot;attr1&amp;quot;: 165, &amp;quot;attr2&amp;quot;: &amp;quot;A-1&amp;quot; }

For each documentId, there is only one document which represented its current state.
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;to-return-only-current-document-2&#34;&gt;To return only current document&lt;/h6&gt;

&lt;p&gt;This one is the simplest of them all.  Since the old versions are in another collection, you just query normally when you need to find a single or multiple documents - they will all be the current version.&lt;/p&gt;

&lt;h6 id=&#34;to-generate-new-version-and-update-2&#34;&gt;To generate new version and update&lt;/h6&gt;

&lt;p&gt;This one may be the hardest.  Technically, you only need to do a few things: read the current document, construct out of it the new current document, save the new current document on top of previous one and if successful, then insert the old current document into the &amp;ldquo;previous&amp;rdquo; collection.   Of course we would use the same compare-and-swap update to make sure that no one changed the document between our read and our write, and only insert into previous collection if we successfully update current.&lt;/p&gt;

&lt;p&gt;The problem is that you may fail before that last write and now you&amp;rsquo;ll be missing a version of this document from the &amp;ldquo;previous&amp;rdquo; collection.&lt;/p&gt;

&lt;p&gt;What if we  switch the order of writes to save into the previous collection first?   We read the current document, we write it to previous collection, we now change it to be &amp;ldquo;new&amp;rdquo; current and save it into &amp;ldquo;current&amp;rdquo; collection.  This has several advantages:
- if someone else is trying to update this document, they will also be saving into &amp;ldquo;previous&amp;rdquo; collection, so having a unique index on docId, version will tell us if we lost the race and now have to try again.&lt;br /&gt;
- if the thread dies in the middle (after insert into previous and before updating current) it&amp;rsquo;s not the end of the world, as your current collection was not affected, but you do need a way to &amp;ldquo;clean up&amp;rdquo; your &amp;ldquo;previous&amp;rdquo; collection, first because you need to remove the version of the document that never existed in &amp;ldquo;current&amp;rdquo; and second because it will block all other &amp;ldquo;updates&amp;rdquo; on this document by using an invalid &amp;ldquo;docId&amp;rdquo;, &amp;ldquo;version&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Luckily, clean-up may be simple, as any time we detect that there exists a docId, version in &amp;ldquo;current&amp;rdquo; that also exists in &amp;ldquo;previous&amp;rdquo; it means either there is an update &amp;ldquo;in progress&amp;rdquo; or it means that an update &amp;ldquo;died&amp;rdquo; and we should clean up.  Of course the devil is in the details - and it could cause delays in the system since you have to wait long enough to be sure that this &amp;ldquo;in progress&amp;rdquo; update actually died.  Or you can have another field that you update after successful writes in both places (now making it easier to recover, but needing to do three writes before you&amp;rsquo;re done with a single document update!)  Let&amp;rsquo;s call this Medium Hard still.&lt;/p&gt;

&lt;h5 id=&#34;choice-4&#34;&gt;Choice 4&lt;/h5&gt;

&lt;p&gt;Store only &amp;ldquo;deltas&amp;rdquo; with increasing versions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    {  &amp;quot;documentId&amp;quot; : 174, &amp;quot;v&amp;quot; : 1,  &amp;quot;attr1&amp;quot;: 165 }
    {  &amp;quot;documentId&amp;quot; : 174, &amp;quot;v&amp;quot; : 2,  &amp;quot;attr2&amp;quot;: &amp;quot;A-1&amp;quot; }
    {  &amp;quot;documentId&amp;quot; : 174, &amp;quot;v&amp;quot; : 3,  &amp;quot;attr1&amp;quot;: 184 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each docId, the current state must be derived by &amp;ldquo;merging&amp;rdquo; all the documents with matching docId, keeping the &amp;ldquo;latest&amp;rdquo; or &amp;ldquo;highest&amp;rdquo; version&amp;rsquo;s value of each attribute if it occurs in more than one version.&lt;/p&gt;

&lt;p&gt;This one is quite complex, and the answer is getting quite long, so let&amp;rsquo;s call it hard and defer the details of how we accomplish this merge till &lt;a href=&#34;http://askasya.com/post/mergeshapes&#34;&gt;next time&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;let-s-summarize&#34;&gt;Let&amp;rsquo;s Summarize&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s a table that shows for each schema choice how well we can handle the reads, writes and if an update has to make more than one write, how easy it is to recover or to be in a relatively &amp;ldquo;safe&amp;rdquo; state:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Schema&lt;/th&gt;
&lt;th&gt;Fetch 1&lt;/th&gt;
&lt;th&gt;Fetch Many&lt;/th&gt;
&lt;th&gt;Update&lt;/th&gt;
&lt;th&gt;Recover if fail&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1) New doc for each&lt;/td&gt;
&lt;td&gt;Easy,Fast&lt;/td&gt;
&lt;td&gt;Not easy,Slow&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1a) New doc with &amp;ldquo;current&amp;rdquo;&lt;/td&gt;
&lt;td&gt;Easy,Fast&lt;/td&gt;
&lt;td&gt;Easy,Fast&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;Hard&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2) Embedded in single doc&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3) Sep Collection for prev.&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;Medium Hard&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4) Deltas only in new doc&lt;/td&gt;
&lt;td&gt;TBD/Hard&lt;/td&gt;
&lt;td&gt;TBD/Hard&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;?) TBD&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;Easy,Fastest&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&amp;ldquo;N/A&amp;rdquo; for recovery means there is no inconsistent state possible - if we only have to make one write to create/add a new version, we are safe from any inconsistency.  So &amp;ldquo;N/A&amp;rdquo; is the &amp;ldquo;easiest&amp;rdquo; value there.&lt;/p&gt;

&lt;p&gt;I deferred describing what it would take to query the &amp;ldquo;Store deltas only&amp;rdquo; option till the next &amp;ldquo;Ask Asya&amp;rdquo; but let me foreshadow and tell you that it&amp;rsquo;s not particularly easy - it involves a long and tricky aggregation.&lt;/p&gt;

&lt;p&gt;But you can see I filled in a yet undescribed way that magically somehow makes all our tasks easy, and yet seems to not have any performance issues nor consistency problems.  If you&amp;rsquo;ve stuck with me this far, I promise that I will describe the magical &amp;ldquo;winner&amp;rdquo; for version keeping in the next &amp;ldquo;Ask Asya&amp;rdquo; after the one that shows how to aggregate deltas of document into one.&lt;/p&gt;

&lt;p&gt;Since I just enabled comments and discussion on these pages, if you see a possible schema approach I didn&amp;rsquo;t mention, feel free to suggest it.  Free &amp;ldquo;MongoDB&amp;rdquo; t-shirt for you if you guess the &amp;ldquo;TBD&amp;rdquo; schema I have in mind.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Does FindAndModify Do</title>
      <link>http://asya999.github.io/post/findandmodify/</link>
      <pubDate>Mon, 19 May 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/findandmodify/</guid>
      <description>

&lt;h3 id=&#34;question&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;I saw &lt;a href=&#34;1&#34; title=&#34;Actually [William_Shakespeare][2] said it. 
&#34;&gt;your answer on SO&lt;/a&gt; about the difference between &amp;ldquo;update&amp;rdquo; and &amp;ldquo;findAndModify&amp;rdquo;, could you explain in more detail what the difference is, and why MongoDB findAndModify is named what it is?&lt;/p&gt;

&lt;h3 id=&#34;answer&#34;&gt;Answer:&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;What&amp;rsquo;s in a name?  that which we call a rose&lt;br /&gt;
 By any other name would smell as sweet&lt;/em&gt;;
&lt;p style=&#34;text-align:right&#34; markdown=&#34;1&#34;&gt; - said Juliet&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;As it turns out, a lot is in a name.  A poorly chosen name can confuse many users, year after year.  I believe &lt;code&gt;findAndModify&lt;/code&gt; was probably not the best name for the role that it plays.&lt;/p&gt;

&lt;h5 id=&#34;update&#34;&gt;update&lt;/h5&gt;

&lt;p&gt;An &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/db.collection.update/&#34;&gt;update&lt;/a&gt; finds an appropriate document (by default it&amp;rsquo;s just one) and then it changes its contents according to your specification.&lt;/p&gt;

&lt;h5 id=&#34;findandmodify&#34;&gt;findAndModify&lt;/h5&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command/findAndModify/#dbcmd.findAndModify&#34;&gt;findAndModify command&lt;/a&gt; finds an appropriate document (it&amp;rsquo;s always just one) and then it changes its contents according to your specification and &lt;em&gt;then it returns that exact document that it changed&lt;/em&gt; (old version or new version, depending on which you ask for)&lt;/p&gt;

&lt;h5 id=&#34;what-s-the-difference&#34;&gt;What&amp;rsquo;s the Difference?&lt;/h5&gt;

&lt;p&gt;They both find a document and update it atomically.  What that means is that it&amp;rsquo;s not possible for another thread to change part of this document between the time we find it and start updating it and when we finish updating it.   It also means that no other thread will see this document in &amp;ldquo;half-updated&amp;rdquo; state.  That&amp;rsquo;s what &amp;ldquo;atomic&amp;rdquo; means - all-or-nothing.&lt;/p&gt;

&lt;h5 id=&#34;why-do-we-even-need-findandmodify-then&#34;&gt;Why do we even need &lt;code&gt;findAndModify&lt;/code&gt; then?&lt;/h5&gt;

&lt;p&gt;What if we need to get the full document that we just updated (like marking an item in a queue &amp;ldquo;yours&amp;rdquo; and then working on it)?&lt;/p&gt;

&lt;p&gt;What I said on &lt;a href=&#34;http://stackoverflow.com&#34;&gt;StackOverflow&lt;/a&gt; was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you fetch an item and then update it, there may be an update by another thread between those two steps. If you update an item first and then fetch it, there may be another update in-between and you will get back a different item than what you updated.&lt;/p&gt;

&lt;p&gt;Doing it &amp;ldquo;atomically&amp;rdquo; means you are guaranteed that you are getting back the exact same item you are updating - i.e. no other operation can happen in between.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s why you&amp;rsquo;ll hear people talk about &lt;code&gt;findAndModify&lt;/code&gt; in the context of implementing a queue mechanism - &lt;code&gt;findAndModify&lt;/code&gt; can update a single document to indicate that you are now working on it, and return that same document to you in one operation.&lt;/p&gt;

&lt;h5 id=&#34;when-not-to-use-findandmodify&#34;&gt;When Not to Use &lt;code&gt;findAndModify&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;There are scenarios where &lt;code&gt;findAndModify&lt;/code&gt; cannot help you.   If you need to update a document based on existing values of a document, you can use many &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update/#id1&#34;&gt;update operators&lt;/a&gt; which are atomic and allow you to change a field value without knowing what its current value is, like &lt;code&gt;$inc&lt;/code&gt; and &lt;code&gt;$addToSet&lt;/code&gt; and &lt;code&gt;$min&lt;/code&gt;  and &lt;code&gt;$max&lt;/code&gt;, etc.  They allow you to modify a field without having to read the value of that field first.  And they work with a regular &lt;code&gt;update&lt;/code&gt; as well as with &lt;code&gt;findAndModify&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But if you need to set field &lt;code&gt;a1&lt;/code&gt; based on the current value of the field &lt;code&gt;b2&lt;/code&gt; then you would have to read the document first and then when executing your update, you would have to ensure that the update is conditional on no one else having changed that document in the meantime and/or by having unique constraints to guarantee it.&lt;/p&gt;

&lt;p&gt;There is no way to utilize &lt;code&gt;findAndModify&lt;/code&gt; here, because it&amp;rsquo;s limited to the exact set of operators that &lt;code&gt;update&lt;/code&gt; uses, all it adds is the ability to return the exact document you modified.  Of course, &lt;code&gt;findAndModify&lt;/code&gt; has to do more work than &lt;code&gt;update&lt;/code&gt; so for best performance you should only use &lt;code&gt;findAndModify&lt;/code&gt; when you must have the document that you just updated back in the application.   If you just want to know if an &lt;code&gt;update&lt;/code&gt; succeeded, you can examine the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command/update/#output&#34;&gt;WriteResult&lt;/a&gt; that update returns.&lt;/p&gt;

&lt;h3 id=&#34;proposal&#34;&gt;Proposal&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s rename &lt;code&gt;findAndModify&lt;/code&gt; to a name that more accurately describes its function.  It updates a document and returns it, but to maintain a small connection to its current name, I nearby propose we rename it:&lt;/p&gt;

&lt;h2 id=&#34;modifyandreturn&#34;&gt;modifyAndReturn&lt;/h2&gt;

&lt;p&gt;Who&amp;rsquo;s with me? &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Actually &lt;a href=&#34;2&#34; title=&#34;Please vote for [SERVER-13979][a] if you agree.
&#34;&gt;William_Shakespeare&lt;/a&gt; said it.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Please vote for &lt;a href=&#34;https://jira.mongodb.org/browse/SERVER-13979&#34;&gt;SERVER-13979&lt;/a&gt; if you agree.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to Model Dynamic Attributes</title>
      <link>http://asya999.github.io/post/dynamicattributes/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/dynamicattributes/</guid>
      <description>

&lt;h3 id=&#34;question&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve heard that MongoDB can be effectively used to model &amp;ldquo;dynamic attributes&amp;rdquo; - where you don&amp;rsquo;t know up front all the different attributes and not all attributes apply to all items.  Can you describe how that can be done, and in particular how it can be effectively indexed?&lt;/p&gt;

&lt;h3 id=&#34;answer&#34;&gt;Answer:&lt;/h3&gt;

&lt;h5 id=&#34;the-problem&#34;&gt;The problem:&lt;/h5&gt;

&lt;p&gt;Imagine you are building an e-commerce site and you aspire to be as big as amazon.com some day, which means you will be selling many different types of products.  It&amp;rsquo;s easy to see that there will be sets of attributes that will only apply to some of the products you sell.&lt;/p&gt;

&lt;p&gt;Product document may look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  SKU: &amp;quot;XRD12349&amp;quot;,
  type: &amp;quot;book&amp;quot;,
  title: &amp;quot;MongoDB, The Definitive Guide&amp;quot;,
  ISBN: &amp;quot;xxx&amp;quot;,
  author: [ &amp;quot;Kristina Chodorow&amp;quot;, &amp;quot;Mike Dieroff&amp;quot;],
  genre: [&amp;quot;computing&amp;quot;, &amp;quot;databases&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  SKU: &amp;quot;Y32944EW&amp;quot;,
  type: &amp;quot;shoes&amp;quot;,
  manufacturer: &amp;quot;ShoesForAll&amp;quot;,
  color: &amp;quot;blue&amp;quot;,
  style: &amp;quot;comfort&amp;quot;,
  size: &amp;quot;7B&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see how it would be extremely challenging to manage a collection that has an incredibly wide variety of document &amp;ldquo;shapes&amp;rdquo;.  Now, while some people call MongoDB &amp;ldquo;schemaless&amp;rdquo; I am not a fan of this designation.  The schema of each document is defined by the document itself.  To be able to build a robust applications you need to decide what the schema of the documents will be, otherwise your application will spend as much time examining the documents to learn their schema as providing actual functionality.&lt;/p&gt;

&lt;h5 id=&#34;possible-solutions&#34;&gt;Possible solutions:&lt;/h5&gt;

&lt;p&gt;One way to index the attributes you want to be able to search by is by creating an index on each such attribute in a schema like the one above.  This is not practical, even if you use &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-sparse/&#34;&gt;&amp;ldquo;sparse&amp;rdquo; indexes&lt;/a&gt; (since many attributes will be set only on a small subset of the products), because you may end up with dozens, if not hundreds of indexes.  In addition, every time a new attribute is introduced, a new index has to be added on the collection.  Not very practical.&lt;/p&gt;

&lt;p&gt;The other solution, which is a nice generalization of storing attributes which are numerous and not known up-front, is to use an array of key-value pairs.&lt;/p&gt;

&lt;p&gt;Our two sample documents might then become:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  SKU: &amp;quot;XRD12349&amp;quot;,
  type: &amp;quot;book&amp;quot;,
  attr: [
      { &amp;quot;k&amp;quot;: &amp;quot;title&amp;quot;, 
        &amp;quot;v&amp;quot;: &amp;quot;MongoDB, The Definitive Guide, 1st Edition&amp;quot;
      },
      { &amp;quot;k&amp;quot;: &amp;quot;ISBN&amp;quot;,
        &amp;quot;v&amp;quot;: &amp;quot;xxx&amp;quot;
      },
      { &amp;quot;k&amp;quot;: &amp;quot;author&amp;quot;,
        &amp;quot;v&amp;quot;: &amp;quot;Kristina Chodorow&amp;quot;
      },
      { &amp;quot;k&amp;quot;: &amp;quot;author&amp;quot;,
        &amp;quot;v&amp;quot;: &amp;quot;Mike Dieroff&amp;quot;
      },
      { &amp;quot;k&amp;quot;: &amp;quot;genre&amp;quot;,
        &amp;quot;v&amp;quot;: [&amp;quot;computing&amp;quot;, &amp;quot;databases&amp;quot;] 
      }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  SKU: &amp;quot;Y32944EW&amp;quot;,
  type: &amp;quot;shoes&amp;quot;,
  attr: [
      { &amp;quot;k&amp;quot;: &amp;quot;manufacturer&amp;quot;, 
        &amp;quot;v&amp;quot;: &amp;quot;ShoesForAll&amp;quot;,
      },
      { &amp;quot;k&amp;quot;: &amp;quot;color&amp;quot;, 
        &amp;quot;v&amp;quot;: &amp;quot;blue&amp;quot;,
      },
      { &amp;quot;k&amp;quot;: &amp;quot;style&amp;quot;, 
        &amp;quot;v&amp;quot;: &amp;quot;comfort&amp;quot;,
      },
      { &amp;quot;k&amp;quot;: &amp;quot;size&amp;quot;, 
        &amp;quot;v&amp;quot;: &amp;quot;7B&amp;quot;
      }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that for an attribute that can have multiple values you have a choice of storing it as an array in a single &amp;ldquo;key&amp;rdquo; or you can repeat keys that can have more than one value.&lt;/p&gt;

&lt;p&gt;Now we can index all of these attribute values with the following:&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
PRIMARY(2.6.0) &gt; db.products.ensureIndex( { &#34;attr.k&#34;:1, &#34;attr.v&#34;:1 } )
&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how the queries will execute and use the index by using the &amp;ldquo;explain()&amp;rdquo; helper in MongoDB shell.  When filtering based on attribute key-value pair, remember to use the &lt;code&gt;$elemMatch&lt;/code&gt; operator to indicate that both conditions must be satisfied by the same element of the array.&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
PRIMARY(2.6.0) &gt; db.products.find( 
                                { &#34;attr&#34;: { &#34;$elemMatch&#34; : { &#34;k&#34;:&#34;size&#34;, &#34;v&#34;:&#34;8B&#34; } }
                     } ).explain()
{
    &#34;cursor&#34; : &#34;BtreeCursor attr.k_1_attr.v_1&#34;,
    &#34;isMultiKey&#34; : true,
    &#34;n&#34; : 104,
    &#34;nscannedObjects&#34; : 104,
    &#34;nscanned&#34; : 104,
    &#34;nscannedObjectsAllPlans&#34; : 104,
    &#34;nscannedAllPlans&#34; : 104,
    &#34;scanAndOrder&#34; : false,
    &#34;indexOnly&#34; : false,
    &#34;nYields&#34; : 0,
    &#34;nChunkSkips&#34; : 0,
    &#34;millis&#34; : 2,
    &#34;indexBounds&#34; : {
        &#34;attr.k&#34; : [
            [
                &#34;size&#34;,
                &#34;size&#34;
            ]
        ],
        &#34;attr.v&#34; : [
            [
                &#34;8B&#34;,
                &#34;8B&#34;
            ]
        ]
    },
    &#34;server&#34; : &#34;asyasmacbook.local:27017&#34;,
    &#34;filterSet&#34; : false
}
&lt;/pre&gt;

&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
PRIMARY(2.6.0) &gt; db.products.find(
                  { &#34;attr&#34; :  { &#34;$elemMatch&#34; : { &#34;k&#34;:&#34;color&#34;, &#34;v&#34;:&#34;blue&#34;}}
              } ).explain()
{
    &#34;cursor&#34; : &#34;BtreeCursor attr.k_1_attr.v_1&#34;,
    &#34;isMultiKey&#34; : true,
    &#34;n&#34; : 98,
    &#34;nscannedObjects&#34; : 98,
    &#34;nscanned&#34; : 98,
    &#34;nscannedObjectsAllPlans&#34; : 98,
    &#34;nscannedAllPlans&#34; : 98,
    &#34;scanAndOrder&#34; : false,
    &#34;indexOnly&#34; : false,
    &#34;nYields&#34; : 0,
    &#34;nChunkSkips&#34; : 0,
    &#34;millis&#34; : 0,
    &#34;indexBounds&#34; : {
        &#34;attr.k&#34; : [
            [
                &#34;color&#34;,
                &#34;color&#34;
            ]
        ],
        &#34;attr.v&#34; : [
            [
                &#34;blue&#34;,
                &#34;blue&#34;
            ]
        ]
    },
    &#34;server&#34; : &#34;asyasmacbook.local:27017&#34;,
    &#34;filterSet&#34; : false
}
&lt;/pre&gt;

&lt;p&gt;Now I&amp;rsquo;ll use both criteria, and I&amp;rsquo;ll add another one for attribute &amp;ldquo;style&amp;rdquo; - since I want to match only when &lt;em&gt;all&lt;/em&gt; are true (rather than when any is true) I will use the &lt;code&gt;$all&lt;/code&gt; operator.  Passing &amp;ldquo;true&amp;rdquo; as an argument to explain will show all considered plans and not just the winning plan.&lt;/p&gt;

&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
PRIMARY(2.6.0) &gt; db.products.find( { &#34;attr&#34; : { &#34;$all&#34; : [ 
                    { &#34;$elemMatch&#34; : { &#34;k&#34;:&#34;style&#34;, &#34;v&#34;:&#34;comfort&#34; } }, 
                    { &#34;$elemMatch&#34; : { &#34;k&#34;:&#34;color&#34;, &#34;v&#34;:&#34;blue&#34; } },
                    { &#34;$elemMatch&#34; : { &#34;k&#34;:&#34;size&#34;, &#34;v&#34;:&#34;8B&#34; } } 
                  ] } } ).explain(true)
{
    &#34;cursor&#34; : &#34;BtreeCursor attr.k_1_attr.v_1&#34;,
    &#34;isMultiKey&#34; : true,
    &#34;n&#34; : 1,
    &#34;nscannedObjects&#34; : 98,
    &#34;nscanned&#34; : 98,
    &#34;nscannedObjectsAllPlans&#34; : 296,
    &#34;nscannedAllPlans&#34; : 298,
    &#34;scanAndOrder&#34; : false,
    &#34;indexOnly&#34; : false,
    &#34;nYields&#34; : 2,
    &#34;nChunkSkips&#34; : 0,
    &#34;millis&#34; : 1,
    &#34;indexBounds&#34; : {
        &#34;attr.k&#34; : [
            [
                &#34;color&#34;,
                &#34;color&#34;
            ]
        ],
        &#34;attr.v&#34; : [
            [
                &#34;blue&#34;,
                &#34;blue&#34;
            ]
        ]
    },
    &#34;allPlans&#34; : [
        {
            &#34;cursor&#34; : &#34;BtreeCursor attr.k_1_attr.v_1&#34;,
            &#34;isMultiKey&#34; : true,
            &#34;n&#34; : 1,
            &#34;nscannedObjects&#34; : 98,
            &#34;nscanned&#34; : 98,
            &#34;scanAndOrder&#34; : false,
            &#34;indexOnly&#34; : false,
            &#34;nChunkSkips&#34; : 0,
            &#34;indexBounds&#34; : {
                &#34;attributes.name&#34; : [
                    [
                        &#34;color&#34;,
                        &#34;color&#34;
                    ]
                ],
                &#34;attributes.value&#34; : [
                    [
                        &#34;blue&#34;,
                        &#34;blue&#34;
                    ]
                ]
            }
        },
        {
            &#34;cursor&#34; : &#34;BtreeCursor attr.k_1_attr.v_1&#34;,
            &#34;isMultiKey&#34; : true,
            &#34;n&#34; : 1,
            &#34;nscannedObjects&#34; : 99,
            &#34;nscanned&#34; : 100,
            &#34;scanAndOrder&#34; : false,
            &#34;indexOnly&#34; : false,
            &#34;nChunkSkips&#34; : 0,
            &#34;indexBounds&#34; : {
                &#34;attributes.name&#34; : [
                    [
                        &#34;style&#34;,
                        &#34;style&#34;
                    ]
                ],
                &#34;attributes.value&#34; : [
                    [
                        &#34;comfort&#34;,
                        &#34;comfort&#34;
                    ]
                ]
            }
        },
        {
            &#34;cursor&#34; : &#34;BtreeCursor attr.k_1_attr.v_1&#34;,
            &#34;isMultiKey&#34; : true,
            &#34;n&#34; : 1,
            &#34;nscannedObjects&#34; : 99,
            &#34;nscanned&#34; : 100,
            &#34;scanAndOrder&#34; : false,
            &#34;indexOnly&#34; : false,
            &#34;nChunkSkips&#34; : 0,
            &#34;indexBounds&#34; : {
                &#34;attributes.name&#34; : [
                    [
                        &#34;size&#34;,
                        &#34;size&#34;
                    ]
                ],
                &#34;attributes.value&#34; : [
                    [
                        &#34;8B&#34;,
                        &#34;8B&#34;
                    ]
                ]
            }
        }
    ],
    &#34;server&#34; : &#34;asyasmacbook.local:27017&#34;,
    &#34;filterSet&#34; : false,
    &#34;stats&#34; : {
        &#34;type&#34; : &#34;KEEP_MUTATIONS&#34;,
        &#34;works&#34; : 100,
        &#34;yields&#34; : 2,
        &#34;unyields&#34; : 2,
        &#34;invalidates&#34; : 0,
        &#34;advanced&#34; : 1,
        &#34;needTime&#34; : 97,
        &#34;needFetch&#34; : 0,
        &#34;isEOF&#34; : 1,
        &#34;children&#34; : [
            {
                &#34;type&#34; : &#34;FETCH&#34;,
                &#34;works&#34; : 99,
                &#34;yields&#34; : 2,
                &#34;unyields&#34; : 2,
                &#34;invalidates&#34; : 0,
                &#34;advanced&#34; : 1,
                &#34;needTime&#34; : 97,
                &#34;needFetch&#34; : 0,
                &#34;isEOF&#34; : 1,
                &#34;alreadyHasObj&#34; : 0,
                &#34;forcedFetches&#34; : 0,
                &#34;matchTested&#34; : 1,
                &#34;children&#34; : [
                    {
                        &#34;type&#34; : &#34;IXSCAN&#34;,
                        &#34;works&#34; : 98,
                        &#34;yields&#34; : 2,
                        &#34;unyields&#34; : 2,
                        &#34;invalidates&#34; : 0,
                        &#34;advanced&#34; : 98,
                        &#34;needTime&#34; : 0,
                        &#34;needFetch&#34; : 0,
                        &#34;isEOF&#34; : 1,
                        &#34;keyPattern&#34; : &#34;{ attr.k: 1.0, attr.v: 1.0 }&#34;,
                        &#34;boundsVerbose&#34; : &#34;field #0[&#39;attr.k&#39;]: [\&#34;color\&#34;, \&#34;color\&#34;], field #1[&#39;attr.v&#39;]: [\&#34;blue\&#34;, \&#34;blue\&#34;]&#34;,
                        &#34;isMultiKey&#34; : 1,
                        &#34;yieldMovedCursor&#34; : 0,
                        &#34;dupsTested&#34; : 98,
                        &#34;dupsDropped&#34; : 0,
                        &#34;seenInvalidated&#34; : 0,
                        &#34;matchTested&#34; : 0,
                        &#34;keysExamined&#34; : 98,
                        &#34;children&#34; : [ ]
                    }
                ]
            }
        ]
    }
}
&lt;/pre&gt;

&lt;p&gt;What does this mean?   If we look at &lt;code&gt;allPlans&lt;/code&gt; we see that the optimizer tried our attribute index separately (but in parallel) with each of the clauses inside the $all array.  The winning plan was for &amp;ldquo;color&amp;rdquo; attribute because it turned out to be the most selective.&lt;/p&gt;

&lt;p&gt;In MongoDB 2.4 this was not possible and unfortunately the optimizer would use the index for the first clause of the &lt;code&gt;$all&lt;/code&gt; expression.  If it happened to have low selectivity, then you didn&amp;rsquo;t get as good performance as you might have, had you ordered your conditions differently.  In 2.6 the order of expressions inside &lt;code&gt;$all&lt;/code&gt; does not make a difference as the one that&amp;rsquo;s most selective will be the one used by the query optimizer.&lt;/p&gt;

&lt;p&gt;Depending on how you need to query your attributes, there are different ways of structuring the attribute array.  You can use key-value pairs as I showed, you can use the attribute name as the key value, or you can even store a single string value &amp;ldquo;attrname::attrvalue&amp;rdquo; - best thing is to take a look at the types of queries and updates you will be running and try it different ways, benchmark which one works best and use that one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Schema Design - Blog Posts and Comments revisited</title>
      <link>http://asya999.github.io/post/blogsandcommentsrevisted/</link>
      <pubDate>Sat, 29 Mar 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/blogsandcommentsrevisted/</guid>
      <description>

&lt;h3 id=&#34;question&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;I have a question about whether I should store comments inside the blog post entry or in a separate collection. It&amp;rsquo;d be nice to see examples of how to access various fields in both cases, how to index and in general how to know when to embed and when to link.&lt;/p&gt;

&lt;h3 id=&#34;answer&#34;&gt;Answer:&lt;/h3&gt;

&lt;h4 id=&#34;the-blog-schema&#34;&gt;The Blog Schema&lt;/h4&gt;

&lt;p&gt;There has been a lot of discussion and write-ups about how to model a simple blog that allows comments on posts - it&amp;rsquo;s a fairly simple example that everyone can understand, and at the same time it offers several opportunities to choose different ways to structure the schema.  The example usually consists of four concepts: users(or authors), posts, tags on posts and comments on posts.&lt;/p&gt;

&lt;h5 id=&#34;authors&#34;&gt;Authors&lt;/h5&gt;

&lt;p&gt;Typically everyone agrees that the authors or users are stored in a  collection of their own where you keep their information - everything from their username, password, when they last logged in, when they signed up for the service, etc.&lt;/p&gt;

&lt;h5 id=&#34;posts&#34;&gt;Posts&lt;/h5&gt;

&lt;p&gt;There is also little argument that posts should be stored separately from authors - I don&amp;rsquo;t think I&amp;rsquo;ve ever heard anyone advocate for embedding posts within author document - that makes no sense for many reason, not the least of them are the fact that you want to avoid unbounded growth of the author document, and querying over posts is a natural function of the use case so posts really should be first class object.&lt;/p&gt;

&lt;p&gt;What isn&amp;rsquo;t always agreed on is whether the author of the post should have just their unique primary key (or username) saved in each post or whether some of the information, like their full name, should also be denormalized into each post.&lt;/p&gt;

&lt;h5 id=&#34;tags&#34;&gt;Tags&lt;/h5&gt;

&lt;p&gt;Tags being simple strings should be stored inside the post document.  The it advantage of document model over relational is that it allows you to embed an array with multiple values without sacrificing the ability to index the tags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &amp;quot;_id&amp;quot; : &amp;lt;Id&amp;gt;,
    &amp;quot;author&amp;quot; :  { &amp;quot;id&amp;quot; :  &amp;lt;authorId&amp;gt;, &amp;quot;name&amp;quot; :  &amp;quot;Asya Kamsky&amp;quot; },
    &amp;quot;tags&amp;quot; :  [ &amp;quot;schema&amp;quot;, &amp;quot;embed&amp;quot;, &amp;quot;link&amp;quot; ],
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can index tags with &lt;code&gt;db.posts.ensureIndex( { tags:1 } )&lt;/code&gt; which will be used in queries like
    db.posts.find( { &amp;ldquo;tags&amp;rdquo; : { &amp;ldquo;$in&amp;rdquo;:  [&amp;ldquo;schema&amp;rdquo;, &amp;ldquo;performance&amp;rdquo;] } } )&lt;/p&gt;

&lt;p&gt;You probably noticed that I happen to think it&amp;rsquo;s right to denormalize the author&amp;rsquo;s name into the post - I&amp;rsquo;m a strong believer in optimizing for the common case, not exceptional one&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-f1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-f1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and I think optimizing query performance is more important than trying to minimize storage at the cost of performance.&lt;/p&gt;

&lt;h5 id=&#34;comments&#34;&gt;Comments&lt;/h5&gt;

&lt;p&gt;Comment documents, or rather where to store them, usually generates the most discussion and disagreement.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider both options and see what we can gain from each:&lt;/p&gt;

&lt;h6 id=&#34;embed-comments&#34;&gt;embed comments&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;{
     _id: &amp;lt;Id&amp;gt;,
     author: { id: &amp;lt;authorId&amp;gt;, name: &amp;quot;Asya Kamsky&amp;quot; },
     tags: [ &amp;quot;schema&amp;quot;, &amp;quot;embed&amp;quot;, &amp;quot;link&amp;quot; ],
     comments: [
         { author : { id:&amp;lt;authorId&amp;gt;,name:&amp;quot;Joe Shmoe&amp;quot;}, 
           date:ISODate(&amp;quot; &amp;quot;), 
           text:&amp;quot;Blah Blah Blah&amp;quot; },
         { author : { id:&amp;lt;authorId&amp;gt;,name:&amp;quot;Jane Doe&amp;quot;}, 
           date:ISODate(&amp;quot; &amp;quot;), 
           text:&amp;quot;Blah Blah Blah&amp;quot; },
         { author : { id:&amp;lt;authorId&amp;gt;,name:&amp;quot;Asya Kamsky&amp;quot;}, 
           date:ISODate(&amp;quot; &amp;quot;), 
           text:&amp;quot;Blah Blah Blah&amp;quot; },
         ...
     ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to other indexes we already plan to have on posts, we will probably need to add several indexes to support querying for comments or by comments.  For example, when someone logs in, I can see wanting to show them all the threads/posts that they commented on, which means we need to index on &amp;ldquo;comments.author.id&amp;rdquo; so that we can query for posts that this author commented on.  We also might need to include fields inside the comments array to track which comments are responses to which other comments, and the biggest downside of them all, if the discussion in comments gets really heated, we will end up with a huge array inside this post.&lt;/p&gt;

&lt;h6 id=&#34;have-separate-comments-collection&#34;&gt;have separate comments collection&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;{  post : &amp;lt;postId&amp;gt;,
    author : { id:&amp;lt;authorId&amp;gt;,name:&amp;quot;Joe Shmoe&amp;quot;}, 
    date:ISODate(&amp;quot; &amp;quot;), 
    text:&amp;quot;Blah Blah Blah&amp;quot; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A collection of comments would have to have an index on the postId so that we can look up the comments for a particular post, probably compound index with date so that we can query for the most recent posts.  We would want to index author.id and date as well.  But the nice thing is that here we can control how many comments we want returned, and even though querying for all comments for a post might involve some random IO, we can minimize it by only querying for as many comments as we intend to display.  The fact is that most of the time the reader of the blog post won&amp;rsquo;t even look at the comments, and if they do then they might read a few and never click on &amp;ldquo;show more&amp;rdquo; which we would normally have.&lt;/p&gt;

&lt;p&gt;Is there a third option?&lt;/p&gt;

&lt;h6 id=&#34;hybrid-option&#34;&gt;hybrid option&lt;/h6&gt;

&lt;p&gt;The nice thing about flexible schema is that in cases like these you can keep comments in separate collection but also choose to denormalize some small number of comments into the post itself, either first few or the last few or whatever fits your requirements best.&lt;/p&gt;

&lt;p&gt;This hybrid approach may be analogous to the product collection for an e-commerce site where they store reviews of products separately from the product itself, but keep the highest voted reviews  (one positive and one negative) embedded in the product. This is a good schema because when you display the product, you want to display a few most helpful reviews, but you don&amp;rsquo;t need to display all the reviews at that time.&lt;/p&gt;

&lt;h4 id=&#34;summary&#34;&gt;Summary&lt;/h4&gt;

&lt;p&gt;The general principal to use when trying to decide between embedding and linking is this:
- consider which objects are first class entities and which are properties of such entities
- consider what your use case requires to display fast and what allows for additional queries
- when two choices both seem to be viable, prototype both and see which works better&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-f1&#34;&gt;Someone always brings up the possibility that the author will change their name, as if that&amp;rsquo;s an everyday occurrence
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-f1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Why shouldn&#39;t I embed large arrays in my documents?</title>
      <link>http://asya999.github.io/post/largeembeddedarrays/</link>
      <pubDate>Thu, 13 Feb 2014 00:00:00 UTC</pubDate>
      <author>Asya Kamsky</author>
      <guid>http://asya999.github.io/post/largeembeddedarrays/</guid>
      <description>

&lt;p&gt;+++
Categories = [&amp;ldquo;MongoDB&amp;rdquo;]
Title= &amp;ldquo;Why shouldn&amp;rsquo;t I embed large arrays in my documents?&amp;rdquo;
Date= &amp;ldquo;2014-02-13&amp;rdquo;
Slug= &amp;ldquo;largeembeddedarrays&amp;rdquo;
Tags= [&amp;ldquo;schema&amp;rdquo;,&amp;ldquo;performance&amp;rdquo;,&amp;ldquo;arrays&amp;rdquo;,&amp;ldquo;mongodb&amp;rdquo;]
+++&lt;/p&gt;

&lt;h3 id=&#34;question&#34;&gt;Question:&lt;/h3&gt;

&lt;p&gt;Why shouldn&amp;rsquo;t I embed large arrays in my documents?  It seems incredibly convenient and intuitive but I&amp;rsquo;ve heard there are performance penalties.  What causes them and how do I know if I should avoid using arrays?&lt;/p&gt;

&lt;h3 id=&#34;answer&#34;&gt;Answer:&lt;/h3&gt;

&lt;p&gt;Arrays are wonderful when used properly.  When talking about performance, the main reason to be wary of arrays is when they grow without bounds.&lt;/p&gt;

&lt;p&gt;Imagine you create a document:
&lt;pre class=&#34;prettyprint&#34;&gt;
{ user: &amp;ldquo;Asya&amp;rdquo;,
  email: &amp;ldquo;asya@mongodb.com&amp;rdquo;,
  twitter: [&amp;ldquo;@asya999&amp;rdquo;, &amp;ldquo;@ask-asya&amp;rdquo;]
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Notice that twitter field is an array.  That&amp;rsquo;s perfectly fine and excellent - we don&amp;rsquo;t want to create a separate collection like we&amp;rsquo;d have to do in relational model, just because a person might have multiple twitter accounts/handles.&lt;/p&gt;

&lt;p&gt;Now that the document has been created, a certain amount of space has been allocated for it.  If we continue growing the document by adding new fields to it, it will have to be moved and a larger allocation will be made for it because MongoDB dynamically tracks how often documents outgrow their allocation and tries to allocate more space for newly written or moved documents to account for the future growth.&lt;/p&gt;

&lt;p&gt;Compare the cost of an update to a document when you can make an in-place change, versus rewriting the entire document somewhere else.  First, instead of just rewriting part of a document &amp;ldquo;in place&amp;rdquo; we have to allocate new space for it.  We have to rewrite the entire document, put the space that it used to occupy on the free list so that it can get re-used, and then repoint all the index entries that used to point to the old document location to the new location.  All of this must be done atomically, so your single write suddenly took a bit longer than a few microseconds that it used to take when the document didn&amp;rsquo;t have to move.&lt;/p&gt;

&lt;p&gt;Now imagine what happens if you add a new array field to the document representing something that&amp;rsquo;s not naturally bound the way someone&amp;rsquo;s twitter handles or shipping addresses would be bound.  What if we want to embed into this document every time I perform some activity, let&amp;rsquo;s say click on a like button, or make a comment on someone&amp;rsquo;s blog?&lt;/p&gt;

&lt;p&gt;First of all, we have to consider why we would want to do such a thing.  Normally, I would advise people to embed things that they always want to get back when they are fetching this document.  The flip side of this is that you don&amp;rsquo;t want to embed things in the document that you don&amp;rsquo;t want to get back with it.&lt;/p&gt;

&lt;p&gt;If you embed activity I perform into the document, it&amp;rsquo;ll work great at first because all of my activity is right there and with a single read you can get back everything you might want to show me: &amp;ldquo;you recently clicked on this and here are your last two comments&amp;rdquo; but what happens after six months go by and I don&amp;rsquo;t care about things I did a long time ago and you don&amp;rsquo;t want to show them to me unless I specifically go to look for some old activity?&lt;/p&gt;

&lt;p&gt;First, you&amp;rsquo;ll end up returning bigger and bigger document and caring about smaller and smaller portion of it.  But you can use projection to only return some of the array, the real pain is that the document on disk will get bigger and it will still all be read even if you&amp;rsquo;re only going to return part of it to the end user, but since my activity is not going to stop as long as I&amp;rsquo;m active, the document will continue growing and growing.&lt;/p&gt;

&lt;p&gt;The most obvious problem with this is eventually you&amp;rsquo;ll hit the 16MB document limit, but that&amp;rsquo;s not at all what you should be concerned about.  A document that continuously grows will incur higher and higher cost every time it has to get relocated on disk, and even if you take steps to mitigate the effects of fragmentation, your writes will overall be unnecessarily long, impacting overall performance of your entire application.&lt;/p&gt;

&lt;p&gt;There is one more thing that you can do that will completely kill your application&amp;rsquo;s performance and that&amp;rsquo;s to index this ever-increasing array.  What that means is that every single time the document with this array is relocated, the number of index entries that need to be updated is directly proportional to the number of indexed values in that document, and the bigger the array, the larger that number will be.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want this to scare you from using arrays when they are a good fit for the data model - they are a powerful feature of the document database data model, but like all powerful tools, it needs to be used in the right circumstances and it should be used with care.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
